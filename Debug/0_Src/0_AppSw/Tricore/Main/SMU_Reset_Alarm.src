	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Tricore\\Main\\.SMU_Reset_Alarm.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.src ..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c'

	
$TC162
	.sdecl	'.zrodata.IfxScuWdt..1.cnt',data,rom
	.sect	'.zrodata.IfxScuWdt..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-268213592
	.sdecl	'.zrodata.SMU_Reset_Alarm..2.cnt',data,rom
	.sect	'.zrodata.SMU_Reset_Alarm..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268214184
	
	.sdecl	'.text.SMU_Reset_Alarm.config_SMU_reset',code,cluster('config_SMU_reset')
	.sect	'.text.SMU_Reset_Alarm.config_SMU_reset'
	.align	2
	
	.global	config_SMU_reset

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     1  /**********************************************************************************************************************
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     2   * \file SMU_Reset_Alarm.c
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     3   * \copyright Copyright (C) Infineon Technologies AG 2019
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     4   *
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     5   * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     6   * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     7   * are agreed, use of this file is subject to following:
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     8   *
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	     9   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    10   *
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    11   * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    12   * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    13   * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    14   * Software is furnished to do so, all subject to the following:
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    15   *
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    16   * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    17   * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    18   * derivative works of the Software, unless such copies or derivative works are solely in the form of
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    19   * machine-executable object code generated by a source language processor.
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    20   *
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    21   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    22   * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    23   * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    24   * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    25   * IN THE SOFTWARE.
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    26   *********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    27  
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    28  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    29  /*-----------------------------------------------------Includes------------------------------------------------------*/
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    30  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    31  #include "SMU_Reset_Alarm.h"
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    32  #include "IfxSmu.h"
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    33  #include "IfxSrc.h"
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    34  
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    35  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    36  /*--------------------------------------------Function Implementations-----------------------------------------------*/
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    37  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    38  /* This function configures the SMU module to trigger a reset if a software alarm occurs */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    39  void config_SMU_reset(void)
; Function config_SMU_reset
.L7:
config_SMU_reset:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   614      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   615  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   618  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   619  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   620      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   624  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   626      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   627       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   628       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   630      uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   631      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   635  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   637      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   641  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   643      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   644      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   646      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   647       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   648       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   649      password  = watchdog->CON0.B.PW;
	ld.w	d15,.1.cnt
	mov.a	a15,d15
	fcall	.cocofun_4
.L40:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L2
.L72:
	fcall	.cocofun_3
.L60:
	st.w	[a15],d15

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L2:
	sha	d0,#2
	ld.w	d15,.1.cnt
.L61:
	mov.a	a2,d15
.L73:
	or	d15,d0,#2
	ld.w	d0,[a15]
	insert	d0,d0,#0,#0,#16
.L74:
	or	d15,d0
	st.w	[a2],d15

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
.L3:
	ld.w	d15,[a15]
.L75:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L3
.L46:

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    40  {
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    41      /* Clear Safety ENDINIT protection to allow register modification */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    42      IfxScuWdt_clearSafetyEndinitInline(IfxScuWdt_getSafetyWatchdogPasswordInline());
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    43      /* Enable the SMU system reset request */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    44      SCU_RSTCON.B.SMU = 0x1;
	ld.w	d15,.2.cnt
	mov.a	a4,d15
	ld.bu	d15,[a4]
.L76:
	insert	d15,d15,#1,#6,#2
	st.b	[a4],d15
.L51:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   614      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   615  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   618  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   619  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   620      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   624  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   626      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   627       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   628       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   630      uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   631      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   635  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   637      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   641  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   643      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   644      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   646      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   647       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   648       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   649      password  = watchdog->CON0.B.PW;
	fcall	.cocofun_4
.L52:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   691      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L4
.L77:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   650      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   651  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   652      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   653  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   656  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   657  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   658      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   659      {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   660          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   661          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   662                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   663                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   664                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   665      }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   667      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   668      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   669                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   670                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   671                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   672  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   673      /* read back ENDINIT and wait until it has been set */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   675      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   676  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   678  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   679  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   680  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   681      /* Set EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   682      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   683  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   684      while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   685      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   686  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   689  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   690  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   691      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   692      {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   693          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   694          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   695                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   696                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	fcall	.cocofun_3
.L78:
	st.w	[a2],d15

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   691      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L4:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   697                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   698      }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   700      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   701      SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   702                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   703                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d0,#2
.L63:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   704                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	or	d15,d0,#3
	ld.w	d0,[a15]
	insert	d0,d0,#0,#0,#16
.L79:
	or	d15,d0
	st.w	[a2],d15

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   707      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
.L5:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   705  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   706      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   707      while (SCU_WDTS_CON0.B.ENDINIT == 0)
	ld.w	d15,[a15]
.L80:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   707      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L5
.L55:

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    45      /* Set Safety ENDINIT protection to allow register modification */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    46      IfxScuWdt_setSafetyEndinitInline(IfxScuWdt_getSafetyWatchdogPasswordInline());
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    47  
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    48      /* Enable the SMU register configuration by setting the CFGLCK field of the SMU_KEYS register to 0xBC */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    49      IfxSmu_unlockConfigRegisters();
	call	IfxSmu_unlockConfigRegisters
.L81:

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    50      /* SMU alarm configuration: select Software Alarm 0 (alarm group 10) and send a reset request to the SCU */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    51      IfxSmu_setAlarmAction(IfxSmu_Alarm_Software_Alarm0, IfxSmu_InternalAlarmAction_reset);
	mov	d4,#320
.L82:
	mov	d5,#6
	call	IfxSmu_setAlarmAction
.L83:

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    52      /* Afterwards, lock the SMU configuration */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    53      IfxSmu_lockConfigRegisters();
	call	IfxSmu_lockConfigRegisters
.L84:

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    54  
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    55      /* Start the SMU state machine (SSM) */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    56      IfxSmu_activateRunState();
	j	IfxSmu_activateRunState
.L38:
	
__config_SMU_reset_function_end:
	.size	config_SMU_reset,__config_SMU_reset_function_end-config_SMU_reset
.L22:
	; End of function
	
	.sdecl	'.text.SMU_Reset_Alarm..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.SMU_Reset_Alarm..cocofun_4'
	.align	2
; Function .cocofun_4
.L9:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   614      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   615  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   618  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   619  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   620      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   624  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   626      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   627       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   628       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   630      uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   631      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   635  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   637      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   641  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   643      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   644      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   646      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   647       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   648       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   649      password  = watchdog->CON0.B.PW;
	ld.w	d15,[a15]
	extr.u	d15,d15,#2,#14
.L62:

; D:\WorkSpace\Tasking\Tasking_TC375_SMU_Reset_Alarm\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   650      password ^= 0x003F;
	xor	d0,d15,#63
	ld.w	d15,[a15]
.L101:
	fret
.L37:
	; End of function
	.sdecl	'.text.SMU_Reset_Alarm..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.SMU_Reset_Alarm..cocofun_3'
	.align	2
; Function .cocofun_3
.L11:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	ld.w	d1,[a15]
.L93:
	sha	d15,d0,#2
.L94:
	insert	d1,d1,#0,#0,#16
.L95:
	or	d15,#1
.L96:
	or	d15,d1
	fret
.L32:
	; End of function
	.sdecl	'.text.SMU_Reset_Alarm.trigger_SMU_reset',code,cluster('trigger_SMU_reset')
	.sect	'.text.SMU_Reset_Alarm.trigger_SMU_reset'
	.align	2
	
	.global	trigger_SMU_reset

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    57  }
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    58  
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    59  /* This function triggers the Software Alarm 0 */
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    60  void trigger_SMU_reset(void)
; Function trigger_SMU_reset
.L13:
trigger_SMU_reset:	.type	func

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    61  {
; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    62      IfxSmu_setAlarmStatus(IfxSmu_Alarm_Software_Alarm0);    /* Trigger Software Alarm 0 */
	mov	d4,#320
	j	IfxSmu_setAlarmStatus
.L59:
	
__trigger_SMU_reset_function_end:
	.size	trigger_SMU_reset,__trigger_SMU_reset_function_end-trigger_SMU_reset
.L27:
	; End of function
	
	.calls	'config_SMU_reset','IfxSmu_unlockConfigRegisters'
	.calls	'config_SMU_reset','IfxSmu_setAlarmAction'
	.calls	'config_SMU_reset','IfxSmu_lockConfigRegisters'
	.calls	'config_SMU_reset','IfxSmu_activateRunState'
	.calls	'trigger_SMU_reset','IfxSmu_setAlarmStatus'
	.calls	'config_SMU_reset','.cocofun_4'
	.calls	'config_SMU_reset','.cocofun_3'
	.calls	'config_SMU_reset','',0
	.calls	'.cocofun_4','',0
	.calls	'.cocofun_3','',0
	.extern	IfxSmu_activateRunState
	.extern	IfxSmu_lockConfigRegisters
	.extern	IfxSmu_setAlarmAction
	.extern	IfxSmu_setAlarmStatus
	.extern	IfxSmu_unlockConfigRegisters
	.calls	'trigger_SMU_reset','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L15:
	.word	55494
	.half	3
	.word	.L16
	.byte	4
.L14:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\Debug\\',0,12,1
	.word	.L17
	.byte	2,1,1,3
	.word	167
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	170
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	215
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	227
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	307
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	281
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	313
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	313
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	281
	.byte	6,0
.L43:
	.byte	7
	.byte	'unsigned short int',0,2,7
.L45:
	.byte	4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1
.L47:
	.byte	5
	.byte	'password',0,3,197,4,59
	.word	399
.L49:
	.byte	6,0
.L54:
	.byte	4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1
.L56:
	.byte	5
	.byte	'password',0,3,177,5,57
	.word	399
.L58:
	.byte	6,0
.L39:
	.byte	8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	399
	.byte	1,1
.L41:
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,5,68,16,4,11
	.byte	'SRPN',0,1
	.word	624
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	624
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	624
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	624
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	624
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	624
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	624
	.byte	1,0,2,35,3,0,12,5,93,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	641
	.byte	4,2,35,0,0,14
	.word	931
	.byte	3
	.word	970
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,4,247,1,17,1,1,5
	.byte	'src',0,4,247,1,60
	.word	975
	.byte	6,0,15
	.word	617
	.byte	16
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,17
	.word	1023
	.byte	0,14
	.word	601
	.byte	3
	.word	601
	.byte	18
	.byte	'__cmpswapw',0
	.word	1065
	.byte	1,1,1,1,19
	.byte	'p',0
	.word	1070
	.byte	19
	.byte	'value',0
	.word	601
	.byte	19
	.byte	'compare',0
	.word	601
	.byte	0,20
	.word	175
	.byte	21
	.word	201
	.byte	6,0,20
	.word	236
	.byte	21
	.word	268
	.byte	6,0,20
	.word	318
	.byte	21
	.word	337
	.byte	6,0,20
	.word	353
	.byte	21
	.word	368
	.byte	21
	.word	382
	.byte	6,0,20
	.word	421
	.byte	21
	.word	464
	.byte	6,0,20
	.word	484
	.byte	21
	.word	525
	.byte	6,0,20
	.word	545
	.byte	6,0,22
	.byte	'IfxSmu_activateRunState',0,6,221,2,20
	.word	624
	.byte	1,1,1,1,23
	.byte	'IfxSmu_lockConfigRegisters',0,6,159,3,17,1,1,1,1,24,7,76,9,2,25
	.byte	'IfxSmu_Alarm_CPU0_Lockstep_ComparatorError',0,0,25
	.byte	'IfxSmu_Alarm_CPU0_Buslevel_MpuViolation',0,1,25
	.byte	'IfxSmu_Alarm_CPU0_PFI0_PFLASH0_ReadPathError',0,2,25
	.byte	'IfxSmu_Alarm_CPU0_PCACHETAG_UncorrectableErrorDetection',0,4,25
	.byte	'IfxSmu_Alarm_CPU0_PCACHETAG_MiscellaneousErrorDetection',0,5,25
	.byte	'IfxSmu_Alarm_CPU0_PSPRPCACHE_SingleBitErrorCorrection',0,6,25
	.byte	'IfxSmu_Alarm_CPU0_PSPRPCACHE_UncorrectableErrorDetection',0,7,25
	.byte	'IfxSmu_Alarm_CPU0_PSPRPCACHE_MiscellaneousErrorDetection',0,8,25
	.byte	'IfxSmu_Alarm_CPU0_DSPRDCACHEDLMU_SingleBitErrorCorrection',0,9,25
	.byte	'IfxSmu_Alarm_CPU0_DSPRDCACHEDLMU_UncorrectableErrorDetection',0,10,25
	.byte	'IfxSmu_Alarm_CPU0_DSPRDCACHEDLMU_MiscelleniousErrorDetection',0,11,25
	.byte	'IfxSmu_Alarm_CPU0_DCACHETAG_SingleBitErrorCorrection',0,12,25
	.byte	'IfxSmu_Alarm_CPU0_DCACHETAG_UncorrectableErrorDetection',0,13,25
	.byte	'IfxSmu_Alarm_CPU0_DCACHETAG_MiscellaneousErrorDetection',0,14,25
	.byte	'IfxSmu_Alarm_CPU0_CPU_InstructionFetchSriInterfaceEdcError',0,22,25
	.byte	'IfxSmu_Alarm_CPU0_CPU_DataSriInterfaceLoadStoreEdcError',0,23,25
	.byte	'IfxSmu_Alarm_CPU0_CPU_ExceptionInterruptTrap',0,24,25
	.byte	'IfxSmu_Alarm_CPU1_Lockstep_ComparatorError',0,32,25
	.byte	'IfxSmu_Alarm_CPU1_Buslevel_MpuViolation',0,33,25
	.byte	'IfxSmu_Alarm_CPU1_PFI1_PFLASH1_ReadPathError',0,34,25
	.byte	'IfxSmu_Alarm_CPU1_PCACHETAG_UncorrectableErrorDetection',0,36,25
	.byte	'IfxSmu_Alarm_CPU1_PCACHETAG_MiscellaneousErrorDetection',0,37,25
	.byte	'IfxSmu_Alarm_CPU1_PSPRPCACHE_SingleBitErrorCorrection',0,38,25
	.byte	'IfxSmu_Alarm_CPU1_PSPRPCACHE_UncorrectableErrorDetection',0,39,25
	.byte	'IfxSmu_Alarm_CPU1_PSPRPCACHE_MiscellaneousErrorDetection',0,40,25
	.byte	'IfxSmu_Alarm_CPU1_DSPRDCACHEDLMU_SingleBitErrorCorrection',0,41,25
	.byte	'IfxSmu_Alarm_CPU1_DSPRDCACHEDLMU_UncorrectableErrorDetection',0,42,25
	.byte	'IfxSmu_Alarm_CPU1_DSPRDCACHEDLMU_MiscellaneousErrorDetection',0,43,25
	.byte	'IfxSmu_Alarm_CPU1_DCACHETAG_SingleBitErrorCorrection',0,44,25
	.byte	'IfxSmu_Alarm_CPU1_DCACHETAG_UncorrectableErrorDetection',0,45,25
	.byte	'IfxSmu_Alarm_CPU1_DCACHETAG_MiscellaneousErrorDetection',0,46,25
	.byte	'IfxSmu_Alarm_CPU1_CPU_InstructionFetchSriInterfaceEdcError',0,54,25
	.byte	'IfxSmu_Alarm_CPU1_CPU_DataSriInterfaceLoadStoreEdcError',0,55,25
	.byte	'IfxSmu_Alarm_CPU1_CPU_ExceptionInterruptTrap',0,56,25
	.byte	'IfxSmu_Alarm_CPU2_Lockstep_ComparatorError',0,192,0,25
	.byte	'IfxSmu_Alarm_CPU2_Buslevel_MpuViolation',0,193,0,25
	.byte	'IfxSmu_Alarm_CPU2_PFI2_PFLASH2_ReadPathError',0,194,0,25
	.byte	'IfxSmu_Alarm_CPU2_PCACHETAG_UncorrectableErrorDetection',0,196,0,25
	.byte	'IfxSmu_Alarm_CPU2_PCACHETAG_MiscellaneousErrorDetection',0,197,0,25
	.byte	'IfxSmu_Alarm_CPU2_PSPRPCACHE_SingleBitErrorCorrection',0,198,0,25
	.byte	'IfxSmu_Alarm_CPU2_PSPRPCACHE_UncorrectableErrorDetection',0,199,0,25
	.byte	'IfxSmu_Alarm_CPU2_PSPRPCACHE_MiscellaneousErrorDetection',0,200,0,25
	.byte	'IfxSmu_Alarm_CPU2_DSPRDCACHEDLMU_SingleBitErrorCorrection',0,201,0,25
	.byte	'IfxSmu_Alarm_CPU2_DSPRDCACHEDLMU_UncorrectableErrorDetection',0,202,0,25
	.byte	'IfxSmu_Alarm_CPU2_DSPRDCACHEDLMU_MiscellaneousErrorDetection',0,203,0,25
	.byte	'IfxSmu_Alarm_CPU2_DCACHETAG_SingleBitErrorCorrection',0,204,0,25
	.byte	'IfxSmu_Alarm_CPU2_DCACHETAG_UncorrectableErrorDetection',0,205,0,25
	.byte	'IfxSmu_Alarm_CPU2_DCACHETAG_MiscellaneousErrorDetection',0,206,0,25
	.byte	'IfxSmu_Alarm_CPU2_CPU_InstructionFetchSriInterfaceEdcError',0,214,0,25
	.byte	'IfxSmu_Alarm_CPU2_CPU_DataSriInterfaceLoadStoreEdcError',0,215,0,25
	.byte	'IfxSmu_Alarm_CPU2_CPU_ExceptionInterruptTrap',0,216,0,25
	.byte	'IfxSmu_Alarm_CPU3_Lockstep_ComparatorError',0,224,0,25
	.byte	'IfxSmu_Alarm_CPU3_Buslevel_MpuViolation',0,225,0,25
	.byte	'IfxSmu_Alarm_CPU3_PFI3_PFLASH3_ReadPathError',0,226,0,25
	.byte	'IfxSmu_Alarm_CPU3_PCACHETAG_UncorrectableErrorDetection',0,228,0,25
	.byte	'IfxSmu_Alarm_CPU3_PCACHETAG_MiscellaneousErrorDetection',0,229,0,25
	.byte	'IfxSmu_Alarm_CPU3_PSPRPCACHE_SingleBitErrorCorrection',0,230,0,25
	.byte	'IfxSmu_Alarm_CPU3_PSPRPCACHE_UncorrectableErrorDetection',0,231,0,25
	.byte	'IfxSmu_Alarm_CPU3_PSPRPCACHE_MiscellaneousErrorDetection',0,232,0,25
	.byte	'IfxSmu_Alarm_CPU3_DSPRDCACHEDLMU_SingleBitErrorCorrection',0,233,0,25
	.byte	'IfxSmu_Alarm_CPU3_DSPRDCACHEDLMU_UncorrectableErrorDetection',0,234,0,25
	.byte	'IfxSmu_Alarm_CPU3_DSPRDCACHEDLMU_MiscellaneousErrorDetection',0,235,0,25
	.byte	'IfxSmu_Alarm_CPU3_DCACHETAG_SingleBitErrorCorrection',0,236,0,25
	.byte	'IfxSmu_Alarm_CPU3_DCACHETAG_UncorrectableErrorDetection',0,237,0,25
	.byte	'IfxSmu_Alarm_CPU3_DCACHETAG_MiscellaneousErrorDetection',0,238,0,25
	.byte	'IfxSmu_Alarm_CPU3_CPU_InstructionFetchSriInterfaceEdcError',0,246,0,25
	.byte	'IfxSmu_Alarm_CPU3_CPU_DataSriInterfaceLoadStoreEdcError',0,247,0,25
	.byte	'IfxSmu_Alarm_CPU3_CPU_ExceptionInterruptTrap',0,248,0,25
	.byte	'IfxSmu_Alarm_MTU_Safety_FfUncorrectableErrorDetected',0,192,1,25
	.byte	'IfxSmu_Alarm_IOM_Safety_FfUncorrectableErrorDetected',0,193,1,25
	.byte	'IfxSmu_Alarm_IR_Safety_FfUncorrectableErrorDetected',0,194,1,25
	.byte	'IfxSmu_Alarm_EMEM_Safety_FfUncorrectableErrorDetected',0,195,1,25
	.byte	'IfxSmu_Alarm_SCU_Safety_FfUncorrectableErrorDetected',0,196,1,25
	.byte	'IfxSmu_Alarm_PMS_Safety_FfUncorrectableErrorDetected',0,197,1,25
	.byte	'IfxSmu_Alarm_DMA_Safety_FfUncorrectableErrorDetected',0,198,1,25
	.byte	'IfxSmu_Alarm_SMU_core_Safety_FfUncorrectableErrorDetected',0,199,1,25
	.byte	'IfxSmu_Alarm_SYS_PLL_PER_PLL_Safety_FfUncorrectableErrorDetected',0,200,1,25
	.byte	'IfxSmu_Alarm_GTM_GTM_SingleBitErrorCorrection',0,202,1,25
	.byte	'IfxSmu_Alarm_GTM_GTM_UncorrectableErrorDetection',0,203,1,25
	.byte	'IfxSmu_Alarm_GTM_GTM_MiscellaneousErrorDetection',0,204,1,25
	.byte	'IfxSmu_Alarm_ERAY_ERAY_SingleBitErrorCorrection',0,205,1,25
	.byte	'IfxSmu_Alarm_ERAY_ERAY_UncorrectableErrorDetection',0,206,1,25
	.byte	'IfxSmu_Alarm_ERAY_ERAY_MiscellaneousErrorDetection',0,207,1,25
	.byte	'IfxSmu_Alarm_CAN_CAN_SingleBitErrorCorrection',0,208,1,25
	.byte	'IfxSmu_Alarm_CAN_CAN_UncorrectableErrorDetection',0,209,1,25
	.byte	'IfxSmu_Alarm_CAN_CAN_MiscellaneousErrorDetection',0,210,1,25
	.byte	'IfxSmu_Alarm_Misc_MISC_SingleBitErrorCorrection',0,211,1,25
	.byte	'IfxSmu_Alarm_Misc_MISC_UncorrectableErrorDetection',0,212,1,25
	.byte	'IfxSmu_Alarm_Misc_MISC_MiscellaneousErrorDetection',0,213,1,25
	.byte	'IfxSmu_Alarm_CERBERUS_Safety_FfUncorrectableErrorDetected',0,215,1,25
	.byte	'IfxSmu_Alarm_CCU_Safety_FfCorrectableErrorDetected',0,216,1,25
	.byte	'IfxSmu_Alarm_CCU_Safety_FfUncorrectableErrorDetected',0,217,1,25
	.byte	'IfxSmu_Alarm_LMU_FSI_RAM_LMUDMU_SingleBitErrorCorrection',0,224,1,25
	.byte	'IfxSmu_Alarm_LMU_FSI_RAM_LMUDMU_UncorrectableErrorDetection',0,225,1,25
	.byte	'IfxSmu_Alarm_LMU_FSI_RAM_LMUDMU_MiscellaneousErrorDetection',0,226,1,25
	.byte	'IfxSmu_Alarm_LMU_Lockstep_ComparatorError',0,236,1,25
	.byte	'IfxSmu_Alarm_LMU_Lockstep_ControlError',0,237,1,25
	.byte	'IfxSmu_Alarm_LMU_ECC_Error',0,238,1,25
	.byte	'IfxSmu_Alarm_LMU_Buslevel_MpuError',0,239,1,25
	.byte	'IfxSmu_Alarm_LMU_EDC_ReadPhaseError',0,240,1,25
	.byte	'IfxSmu_Alarm_XBAR0_SRI_BusErrorEvent',0,241,1,25
	.byte	'IfxSmu_Alarm_XBAR1_SRI_BusErrorEvent',0,242,1,25
	.byte	'IfxSmu_Alarm_XBAR2_SRI_BusErrorEvent',0,243,1,25
	.byte	'IfxSmu_Alarm_SPB_BusErrorEvent',0,244,1,25
	.byte	'IfxSmu_Alarm_BBB_BusErrorEvent',0,245,1,25
	.byte	'IfxSmu_Alarm_FSI_PFlash_SingleBitError',0,246,1,25
	.byte	'IfxSmu_Alarm_FSI_PFlash_DoubleBitError',0,247,1,25
	.byte	'IfxSmu_Alarm_FSI_Single_BitCorrectionTrackingBufferFull',0,248,1,25
	.byte	'IfxSmu_Alarm_FSI_Double_BitCorrectionTrackingBufferFull',0,249,1,25
	.byte	'IfxSmu_Alarm_FSI_Multiple_BitErrorDetectionTrackingBufferFull',0,250,1,25
	.byte	'IfxSmu_Alarm_FSI_Zero_BitErrorTrackingBufferFull',0,251,1,25
	.byte	'IfxSmu_Alarm_FSI_PFlash_EccError',0,252,1,25
	.byte	'IfxSmu_Alarm_FSI_PFlash_EdcError',0,253,1,25
	.byte	'IfxSmu_Alarm_FSI_CPUFLASHCON_ConfigurationError',0,254,1,25
	.byte	'IfxSmu_Alarm_FSI_Flash_StoredConfigurationError',0,255,1,25
	.byte	'IfxSmu_Alarm_SCU_OS_CClockFrequencyOutOfRange',0,128,2,25
	.byte	'IfxSmu_Alarm_CCU_Backup_ClockOutOfRangeAlarm',0,129,2,25
	.byte	'IfxSmu_Alarm_CCU_Backup_ClockAliveAlarm',0,130,2,25
	.byte	'IfxSmu_Alarm_SCU_System_PllDcoLossOfLockEvent',0,131,2,25
	.byte	'IfxSmu_Alarm_SCU_Peripheral_PllDcoLossOfLockEvent',0,132,2,25
	.byte	'IfxSmu_Alarm_SCU_LBIST_Alarm',0,133,2,25
	.byte	'IfxSmu_Alarm_SCU_External_RequestUnitAlarm0',0,134,2,25
	.byte	'IfxSmu_Alarm_SCU_External_RequestUnitAlarm1',0,135,2,25
	.byte	'IfxSmu_Alarm_SCU_External_RequestUnitAlarm2',0,136,2,25
	.byte	'IfxSmu_Alarm_SCU_External_RequestUnitAlarm3',0,137,2,25
	.byte	'IfxSmu_Alarm_SCU_CPU0_WatchdogTimeOut',0,138,2,25
	.byte	'IfxSmu_Alarm_SCU_CPU1_WatchdogTimeOut',0,139,2,25
	.byte	'IfxSmu_Alarm_SCU_CPU2_WatchdogTimeOut',0,140,2,25
	.byte	'IfxSmu_Alarm_SCU_CPU3_WatchdogTimeOut',0,141,2,25
	.byte	'IfxSmu_Alarm_SCU_Safety_WatchdogTimeOut',0,144,2,25
	.byte	'IfxSmu_Alarm_SCU_Watchdog_TimeOut',0,145,2,25
	.byte	'IfxSmu_Alarm_SCU_Lockstep_DualRailError',0,146,2,25
	.byte	'IfxSmu_Alarm_SCU_External_EmergencyStopSignalEvent',0,147,2,25
	.byte	'IfxSmu_Alarm_SCU_Pad_HeatingAlarm',0,148,2,25
	.byte	'IfxSmu_Alarm_SCU_LBIST_TestModeAlarm',0,149,2,25
	.byte	'IfxSmu_Alarm_IR_EDC_ConfigurationDataPathError',0,150,2,25
	.byte	'IfxSmu_Alarm_DMA_DMASRI_EccError',0,151,2,25
	.byte	'IfxSmu_Alarm_IOM_Pin_MismatchIndication',0,153,2,25
	.byte	'IfxSmu_Alarm_SCU_External_RequestUnitAlarm4',0,154,2,25
	.byte	'IfxSmu_Alarm_SCU_External_RequestUnitAlarm5',0,155,2,25
	.byte	'IfxSmu_Alarm_SCU_External_RequestUnitAlarm6',0,156,2,25
	.byte	'IfxSmu_Alarm_SCU_External_RequestUnitAlarm7',0,157,2,25
	.byte	'IfxSmu_Alarm_DTS_core_Under_TemperatureAlarm',0,158,2,25
	.byte	'IfxSmu_Alarm_DTS_core_Over_TemperatureAlarm',0,159,2,25
	.byte	'IfxSmu_Alarm_DTS_Temperature_Overflow',0,160,2,25
	.byte	'IfxSmu_Alarm_DTS_Temperature_Underflow',0,161,2,25
	.byte	'IfxSmu_Alarm_EVR_Overvoltage_Alarm',0,163,2,25
	.byte	'IfxSmu_Alarm_EVR_Undervoltage_Alarm',0,165,2,25
	.byte	'IfxSmu_Alarm_EVR_Short_ToLowHightAlarm',0,175,2,25
	.byte	'IfxSmu_Alarm_HSM_Overvoltage_Alarm',0,176,2,25
	.byte	'IfxSmu_Alarm_HSM_Undervoltage_Alarm',0,177,2,25
	.byte	'IfxSmu_Alarm_EMEM_Unexpected_WriteToEmemAlarm',0,180,2,25
	.byte	'IfxSmu_Alarm_EMEM_SEP_ControlLogicAlarm',0,181,2,25
	.byte	'IfxSmu_Alarm_EMEM_Lockstep_ControlLogicInputAlarm',0,182,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm0',0,192,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm1',0,193,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm2',0,194,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm3',0,195,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm4',0,196,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm5',0,197,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm6',0,198,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm7',0,199,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm8',0,200,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm9',0,201,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm10',0,202,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm11',0,203,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm12',0,204,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm13',0,205,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm14',0,206,2,25
	.byte	'IfxSmu_Alarm_Software_Alarm15',0,207,2,25
	.byte	'IfxSmu_Alarm_SMU_Timer0_TimeOut',0,208,2,25
	.byte	'IfxSmu_Alarm_SMU_Timer1_TimeOut',0,209,2,25
	.byte	'IfxSmu_Alarm_SMU_Error_PinFaultStateActivation',0,210,2,25
	.byte	'IfxSmu_Alarm_SMU_Safety_FfCorrectableErrorDetected',0,212,2,25
	.byte	'IfxSmu_Alarm_SMU_Safety_FfUncorrectableErrorDetected',0,213,2,25
	.byte	'IfxSmu_Alarm_SMU_Access_EnableErrorDetected',0,214,2,25
	.byte	'IfxSmu_Alarm_LMU_EDC_AddressPhaseError',0,224,2,25
	.byte	'IfxSmu_Alarm_LMU_EDC_WritePhaseError',0,225,2,25
	.byte	'IfxSmu_Alarm_XBAR_EDC_AddressPhaseError',0,226,2,25
	.byte	'IfxSmu_Alarm_XBAR_EDC_WritePhaseError',0,227,2,25
	.byte	'IfxSmu_Alarm_DMU_EDC_AddressPhaseError',0,228,2,25
	.byte	'IfxSmu_Alarm_DMU_EDC_WritePhaseError',0,229,2,25
	.byte	'IfxSmu_Alarm_SFI_BBB_EDC_AddressPhaseError',0,230,2,25
	.byte	'IfxSmu_Alarm_SFI_BBB_EDC_WritePhaseError',0,231,2,25
	.byte	'IfxSmu_Alarm_SRI_EDC_ReadPhaseError',0,232,2,25
	.byte	'IfxSmu_Alarm_SFI_SPB_EDC_ReadPhaseError',0,233,2,25
	.byte	'IfxSmu_Alarm_HSSL_HSSL0EDC_ReadPhaseError',0,234,2,25
	.byte	'IfxSmu_Alarm_CONVERTER_Phase_SyncronizerError',0,236,2,25
	.byte	'IfxSmu_Alarm_XBAR_SOTA_SwapError',0,237,2,0,24,6,125,9,1,25
	.byte	'IfxSmu_InternalAlarmAction_disabled',0,0,25
	.byte	'IfxSmu_InternalAlarmAction_igcs0',0,2,25
	.byte	'IfxSmu_InternalAlarmAction_igcs1',0,3,25
	.byte	'IfxSmu_InternalAlarmAction_igcs2',0,4,25
	.byte	'IfxSmu_InternalAlarmAction_nmi',0,5,25
	.byte	'IfxSmu_InternalAlarmAction_reset',0,6,25
	.byte	'IfxSmu_InternalAlarmAction_cpureset',0,7,0,26
	.byte	'IfxSmu_setAlarmAction',0,6,171,3,17,1,1,1,1,5
	.byte	'alarm',0,6,171,3,52
	.word	1284
	.byte	5
	.byte	'intAlarmAction',0,6,171,3,86
	.word	10550
	.byte	0,27
	.byte	'IfxSmu_setAlarmStatus',0,6,178,3,20
	.word	624
	.byte	1,1,1,1,5
	.byte	'alarm',0,6,178,3,55
	.word	1284
	.byte	0,22
	.byte	'IfxSmu_unlockConfigRegisters',0,6,197,3,20
	.word	624
	.byte	1,1,1,1,20
	.word	980
	.byte	21
	.word	1008
	.byte	6,0,7
	.byte	'short int',0,2,5,28
	.byte	'__wchar_t',0,8,1,1
	.word	10981
	.byte	28
	.byte	'__size_t',0,8,1,1
	.word	601
	.byte	28
	.byte	'__ptrdiff_t',0,8,1,1
	.word	617
	.byte	29,1,3
	.word	11049
	.byte	28
	.byte	'__codeptr',0,8,1,1
	.word	11051
	.byte	28
	.byte	'boolean',0,9,104,29
	.word	624
	.byte	28
	.byte	'uint8',0,9,108,29
	.word	624
	.byte	28
	.byte	'uint16',0,9,112,29
	.word	399
	.byte	7
	.byte	'unsigned long int',0,4,7,28
	.byte	'uint32',0,9,116,29
	.word	11119
	.byte	28
	.byte	'uint64',0,9,121,29
	.word	281
	.byte	28
	.byte	'sint16',0,9,129,1,29
	.word	10981
	.byte	7
	.byte	'long int',0,4,5,28
	.byte	'sint32',0,9,134,1,29
	.word	11186
	.byte	7
	.byte	'long long int',0,8,5,28
	.byte	'sint64',0,9,141,1,29
	.word	11214
	.byte	28
	.byte	'float32',0,9,170,1,29
	.word	227
	.byte	28
	.byte	'pvoid',0,10,54,28
	.word	313
	.byte	28
	.byte	'Ifx_TickTime',0,10,76,28
	.word	11214
	.byte	28
	.byte	'Ifx_Priority',0,10,100,16
	.word	399
	.byte	28
	.byte	'IfxSmu_Alarm',0,7,139,2,3
	.word	1284
	.byte	28
	.byte	'Ifx_UReg_8Bit',0,11,96,24
	.word	624
	.byte	28
	.byte	'Ifx_UReg_32Bit',0,11,98,24
	.word	601
	.byte	28
	.byte	'Ifx_SReg_32Bit',0,11,101,24
	.word	617
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,12,68,16,4,11
	.byte	'EN0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	624
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SMU_ACCEN0_Bits',0,12,102,3
	.word	11410
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,12,105,16,4,11
	.byte	'reserved_0',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SMU_ACCEN1_Bits',0,12,108,3
	.word	11967
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,12,111,16,4,11
	.byte	'DF0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	624
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SMU_AD_Bits',0,12,145,1,3
	.word	12044
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,12,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	624
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	624
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SMU_AEX_Bits',0,12,176,1,3
	.word	12594
	.byte	7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,12,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	13151
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	13151
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	13151
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	13151
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	13151
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	13151
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	13151
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	13151
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	13151
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	13151
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	13151
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	13151
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	13151
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	13151
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	13151
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	13151
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	13151
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	13151
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	13151
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	13151
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	13151
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	13151
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	13151
	.byte	4,0,2,35,0,0,28
	.byte	'Ifx_SMU_AEXCLR_Bits',0,12,207,1,3
	.word	13167
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,12,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	624
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	399
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SMU_AFCNT_Bits',0,12,217,1,3
	.word	13763
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,12,220,1,16,4,11
	.byte	'SF0',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	13151
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	13151
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	13151
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	13151
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	13151
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	13151
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	13151
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	13151
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	13151
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	13151
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	13151
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	13151
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	13151
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	13151
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	13151
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	13151
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	13151
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	13151
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	13151
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	13151
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	13151
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	13151
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	13151
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	13151
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	13151
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	13151
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	13151
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	13151
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	13151
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_SMU_AG_Bits',0,12,254,1,3
	.word	13903
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,12,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	13151
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	13151
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	13151
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	13151
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	13151
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	13151
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	13151
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	13151
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	13151
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	13151
	.byte	2,0,2,35,0,0,28
	.byte	'Ifx_SMU_AGC_Bits',0,12,142,2,3
	.word	14454
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,12,145,2,16,4,11
	.byte	'CF0',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	13151
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	13151
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	13151
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	13151
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	13151
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	13151
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	13151
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	13151
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	13151
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	13151
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	13151
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	13151
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	13151
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	13151
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	13151
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	13151
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	13151
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	13151
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	13151
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	13151
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	13151
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	13151
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	13151
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	13151
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	13151
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	13151
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	13151
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	13151
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	13151
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_SMU_AGCF_Bits',0,12,179,2,3
	.word	14716
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,12,182,2,16,4,11
	.byte	'FE0',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	13151
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	13151
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	13151
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	13151
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	13151
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	13151
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	13151
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	13151
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	13151
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	13151
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	13151
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	13151
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	13151
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	13151
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	13151
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	13151
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	13151
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	13151
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	13151
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	13151
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	13151
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	13151
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	13151
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	13151
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	13151
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	13151
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	13151
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	13151
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	13151
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_SMU_AGFSP_Bits',0,12,216,2,3
	.word	15271
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,12,219,2,16,4,11
	.byte	'DISR',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	601
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SMU_CLC_Bits',0,12,226,2,3
	.word	15828
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,12,229,2,16,4,11
	.byte	'CMD',0,4
	.word	13151
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	13151
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	13151
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SMU_CMD_Bits',0,12,234,2,3
	.word	15971
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,12,237,2,16,4,11
	.byte	'SSM',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	601
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SMU_DBG_Bits',0,12,241,2,3
	.word	16074
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,12,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	13151
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	13151
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	13151
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	13151
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	13151
	.byte	10,0,2,35,0,0,28
	.byte	'Ifx_SMU_FSP_Bits',0,12,252,2,3
	.word	16162
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,12,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	624
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	624
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SMU_ID_Bits',0,12,132,3,3
	.word	16317
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,12,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	13151
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	13151
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	13151
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SMU_KEYS_Bits',0,12,140,3,3
	.word	16427
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,12,143,3,16,4,11
	.byte	'TGS',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	601
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	624
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	624
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SMU_OCS_Bits',0,12,153,3,3
	.word	16539
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,12,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	13151
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	13151
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	13151
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	13151
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	13151
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	13151
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	13151
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	13151
	.byte	9,0,2,35,0,0,28
	.byte	'Ifx_SMU_PCTL_Bits',0,12,167,3,3
	.word	16731
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,12,170,3,16,4,11
	.byte	'TE0',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	13151
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	13151
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	13151
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	13151
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	13151
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	13151
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	13151
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	13151
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	13151
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	13151
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	13151
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	13151
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	13151
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	13151
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	13151
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	13151
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	13151
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	13151
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	13151
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	13151
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	13151
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	13151
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	13151
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	13151
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	13151
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	13151
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	13151
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	13151
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	13151
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_SMU_RMCTL_Bits',0,12,204,3,3
	.word	16962
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,12,207,3,16,4,11
	.byte	'EF0',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	13151
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	13151
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	13151
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	13151
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	13151
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	13151
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	13151
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	13151
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	13151
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	13151
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	13151
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	13151
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	13151
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	13151
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	13151
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	13151
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	13151
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	13151
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	13151
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	13151
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	13151
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	13151
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	13151
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	13151
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	13151
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	13151
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	13151
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	13151
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	13151
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_SMU_RMEF_Bits',0,12,241,3,3
	.word	17666
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,12,244,3,16,4,11
	.byte	'STS0',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	13151
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	13151
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	13151
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	13151
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	13151
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	13151
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	13151
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	13151
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	13151
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	13151
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	13151
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	13151
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	13151
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	13151
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	13151
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	13151
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	13151
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	13151
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	13151
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	13151
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	13151
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	13151
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	13151
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	13151
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	13151
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	13151
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	13151
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	13151
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	13151
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	13151
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_SMU_RMSTS_Bits',0,12,150,4,3
	.word	18368
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,12,153,4,16,4,11
	.byte	'GID0',0,4
	.word	13151
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	13151
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	13151
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	13151
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	13151
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	13151
	.byte	7,0,2,35,0,0,28
	.byte	'Ifx_SMU_RTAC00_Bits',0,12,161,4,3
	.word	19083
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,12,164,4,16,4,11
	.byte	'GID2',0,4
	.word	13151
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	13151
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	13151
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	13151
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	13151
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	13151
	.byte	7,0,2,35,0,0,28
	.byte	'Ifx_SMU_RTAC01_Bits',0,12,172,4,3
	.word	19251
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,12,175,4,16,4,11
	.byte	'GID0',0,4
	.word	13151
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	13151
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	13151
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	13151
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	13151
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	13151
	.byte	7,0,2,35,0,0,28
	.byte	'Ifx_SMU_RTAC10_Bits',0,12,183,4,3
	.word	19419
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,12,186,4,16,4,11
	.byte	'GID2',0,4
	.word	13151
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	13151
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	13151
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	13151
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	13151
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	13151
	.byte	7,0,2,35,0,0,28
	.byte	'Ifx_SMU_RTAC11_Bits',0,12,194,4,3
	.word	19587
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,12,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	13151
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	13151
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SMU_RTC_Bits',0,12,203,4,3
	.word	19755
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,12,206,4,16,4,11
	.byte	'CMD',0,4
	.word	13151
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	13151
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	13151
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	13151
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	13151
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	13151
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	13151
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	13151
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	13151
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	13151
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	13151
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	13151
	.byte	12,0,2,35,0,0,28
	.byte	'Ifx_SMU_STS_Bits',0,12,220,4,3
	.word	19875
	.byte	12,12,228,4,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11410
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_ACCEN0',0,12,233,4,3
	.word	20130
	.byte	12,12,236,4,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11967
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_ACCEN1',0,12,241,4,3
	.word	20194
	.byte	12,12,244,4,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12044
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_AD',0,12,249,4,3
	.word	20258
	.byte	12,12,252,4,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12594
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_AEX',0,12,129,5,3
	.word	20318
	.byte	12,12,132,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13167
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_AEXCLR',0,12,137,5,3
	.word	20379
	.byte	12,12,140,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13763
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_AFCNT',0,12,145,5,3
	.word	20443
	.byte	12,12,148,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13903
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_AG',0,12,153,5,3
	.word	20506
	.byte	12,12,156,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14454
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_AGC',0,12,161,5,3
	.word	20566
	.byte	12,12,164,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14716
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_AGCF',0,12,169,5,3
	.word	20627
	.byte	12,12,172,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15271
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_AGFSP',0,12,177,5,3
	.word	20689
	.byte	12,12,180,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15828
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_CLC',0,12,185,5,3
	.word	20752
	.byte	12,12,188,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15971
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_CMD',0,12,193,5,3
	.word	20813
	.byte	12,12,196,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16074
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_DBG',0,12,201,5,3
	.word	20874
	.byte	12,12,204,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16162
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_FSP',0,12,209,5,3
	.word	20935
	.byte	12,12,212,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16317
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_ID',0,12,217,5,3
	.word	20996
	.byte	12,12,220,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16427
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_KEYS',0,12,225,5,3
	.word	21056
	.byte	12,12,228,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16539
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_OCS',0,12,233,5,3
	.word	21118
	.byte	12,12,236,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16731
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_PCTL',0,12,241,5,3
	.word	21179
	.byte	12,12,244,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16962
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_RMCTL',0,12,249,5,3
	.word	21241
	.byte	12,12,252,5,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17666
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_RMEF',0,12,129,6,3
	.word	21304
	.byte	12,12,132,6,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18368
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_RMSTS',0,12,137,6,3
	.word	21366
	.byte	12,12,140,6,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19083
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_RTAC00',0,12,145,6,3
	.word	21429
	.byte	12,12,148,6,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19251
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_RTAC01',0,12,153,6,3
	.word	21493
	.byte	12,12,156,6,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19419
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_RTAC10',0,12,161,6,3
	.word	21557
	.byte	12,12,164,6,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19587
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_RTAC11',0,12,169,6,3
	.word	21621
	.byte	12,12,172,6,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19755
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_RTC',0,12,177,6,3
	.word	21685
	.byte	12,12,180,6,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19875
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SMU_STS',0,12,185,6,3
	.word	21746
	.byte	30,4
	.word	624
	.byte	31,3,0,30,20
	.word	624
	.byte	31,19,0,30,28
	.word	624
	.byte	31,27,0,30,136,1
	.word	624
	.byte	31,135,1,0,30,12
	.word	20627
	.byte	31,2,0,30,144,1
	.word	21845
	.byte	31,11,0,30,48
	.word	20689
	.byte	31,11,0,30,48
	.word	20506
	.byte	31,11,0,30,16
	.word	624
	.byte	31,15,0,30,48
	.word	20258
	.byte	31,11,0,30,208,1
	.word	624
	.byte	31,207,1,0,30,220,9
	.word	624
	.byte	31,219,9,0,30,12
	.word	624
	.byte	31,11,0,10
	.byte	'_Ifx_SMU',0,12,197,6,25,128,16,13
	.byte	'CLC',0
	.word	20752
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	21807
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	20996
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	21816
	.byte	20,2,35,12,13
	.byte	'CMD',0
	.word	20813
	.byte	4,2,35,32,13
	.byte	'STS',0
	.word	21746
	.byte	4,2,35,36,13
	.byte	'FSP',0
	.word	20935
	.byte	4,2,35,40,13
	.byte	'AGC',0
	.word	20566
	.byte	4,2,35,44,13
	.byte	'RTC',0
	.word	21685
	.byte	4,2,35,48,13
	.byte	'KEYS',0
	.word	21056
	.byte	4,2,35,52,13
	.byte	'DBG',0
	.word	20874
	.byte	4,2,35,56,13
	.byte	'PCTL',0
	.word	21179
	.byte	4,2,35,60,13
	.byte	'AFCNT',0
	.word	20443
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	21825
	.byte	28,2,35,68,13
	.byte	'RTAC00',0
	.word	21429
	.byte	4,2,35,96,13
	.byte	'RTAC01',0
	.word	21493
	.byte	4,2,35,100,13
	.byte	'RTAC10',0
	.word	21557
	.byte	4,2,35,104,13
	.byte	'RTAC11',0
	.word	21621
	.byte	4,2,35,108,13
	.byte	'AEX',0
	.word	20318
	.byte	4,2,35,112,13
	.byte	'AEXCLR',0
	.word	20379
	.byte	4,2,35,116,13
	.byte	'reserved_78',0
	.word	21834
	.byte	136,1,2,35,120,13
	.byte	'AGCF',0
	.word	21854
	.byte	144,1,3,35,128,2,13
	.byte	'AGFSP',0
	.word	21864
	.byte	48,3,35,144,3,13
	.byte	'AG',0
	.word	21873
	.byte	48,3,35,192,3,13
	.byte	'reserved_1F0',0
	.word	21882
	.byte	16,3,35,240,3,13
	.byte	'AD',0
	.word	21891
	.byte	48,3,35,128,4,13
	.byte	'reserved_230',0
	.word	21900
	.byte	208,1,3,35,176,4,13
	.byte	'RMCTL',0
	.word	21241
	.byte	4,3,35,128,6,13
	.byte	'RMEF',0
	.word	21304
	.byte	4,3,35,132,6,13
	.byte	'RMSTS',0
	.word	21366
	.byte	4,3,35,136,6,13
	.byte	'reserved_30C',0
	.word	21911
	.byte	220,9,3,35,140,6,13
	.byte	'OCS',0
	.word	21118
	.byte	4,3,35,232,15,13
	.byte	'reserved_7EC',0
	.word	21922
	.byte	12,3,35,236,15,13
	.byte	'ACCEN1',0
	.word	20194
	.byte	4,3,35,248,15,13
	.byte	'ACCEN0',0
	.word	20130
	.byte	4,3,35,252,15,0,14
	.word	21931
	.byte	28
	.byte	'Ifx_SMU',0,12,234,6,3
	.word	22517
	.byte	24,13,254,9,9,1,25
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,25
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,25
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,28
	.byte	'IfxScu_WDTCON1_IR',0,13,131,10,3
	.word	22539
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,14,68,16,4,11
	.byte	'EN0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	624
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_ACCEN00_Bits',0,14,102,3
	.word	22661
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,14,105,16,4,11
	.byte	'reserved_0',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN01_Bits',0,14,108,3
	.word	23220
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,14,111,16,4,11
	.byte	'EN0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	624
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_ACCEN10_Bits',0,14,145,1,3
	.word	23299
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,14,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN11_Bits',0,14,151,1,3
	.word	23859
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,14,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	624
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	601
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,14,164,1,3
	.word	23940
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,14,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	624
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	624
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	624
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	624
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	624
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	624
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	624
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	624
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	624
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON0_Bits',0,14,181,1,3
	.word	24166
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,14,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	624
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	624
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	624
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	624
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	624
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	624
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	624
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	624
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	624
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON1_Bits',0,14,199,1,3
	.word	24439
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,14,202,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	624
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	624
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	624
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	601
	.byte	10,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	624
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON2_Bits',0,14,214,1,3
	.word	24765
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,14,217,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	624
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	601
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	624
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON3_Bits',0,14,234,1,3
	.word	25043
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,14,237,1,16,4,11
	.byte	'LOTHR',0,2
	.word	399
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	601
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	624
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON4_Bits',0,14,246,1,3
	.word	25412
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,14,249,1,16,4,11
	.byte	'GETHDIV',0,1
	.word	624
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	624
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	624
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	601
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON5_Bits',0,14,129,2,3
	.word	25592
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,14,132,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	624
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	601
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON6_Bits',0,14,136,2,3
	.word	25764
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,14,139,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	624
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	601
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON7_Bits',0,14,143,2,3
	.word	25864
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,14,146,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	624
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	601
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON8_Bits',0,14,150,2,3
	.word	25964
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,14,153,2,16,4,11
	.byte	'CHREV',0,1
	.word	624
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	624
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	624
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	624
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	624
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	624
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	624
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CHIPID_Bits',0,14,164,2,3
	.word	26064
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,14,167,2,16,4,11
	.byte	'LOWER',0,2
	.word	399
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	624
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	399
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,14,179,2,3
	.word	26267
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,14,182,2,16,4,11
	.byte	'RESULT',0,2
	.word	399
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	601
	.byte	20,0,2,35,0,0,28
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,14,186,2,3
	.word	26499
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,14,189,2,16,4,11
	.byte	'reserved_0',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	13151
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	13151
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SCU_EICON0_Bits',0,14,195,2,3
	.word	26601
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,14,198,2,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	601
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_EICON1_Bits',0,14,207,2,3
	.word	26729
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,14,210,2,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	624
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	624
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	601
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	624
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	624
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EICR_Bits',0,14,229,2,3
	.word	26918
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,14,232,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	624
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	624
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	624
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	624
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_EIFILT_Bits',0,14,254,2,3
	.word	27282
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,14,129,3,16,4,11
	.byte	'INTF0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	601
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_EIFR_Bits',0,14,140,3,3
	.word	27721
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,14,143,3,16,4,11
	.byte	'AE',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	399
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_EISR_Bits',0,14,153,3,3
	.word	27932
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,14,156,3,16,4,11
	.byte	'POL',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	399
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	399
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_SCU_EMSR_Bits',0,14,166,3,3
	.word	28108
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,14,169,3,16,4,11
	.byte	'reserved_0',0,4
	.word	601
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	624
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	624
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	624
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_EMSSW_Bits',0,14,175,3,3
	.word	28302
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,14,178,3,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	399
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	601
	.byte	23,0,2,35,0,0,28
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,14,183,3,3
	.word	28437
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,14,186,3,16,4,11
	.byte	'ARI',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	601
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_ESROCFG_Bits',0,14,191,3,3
	.word	28573
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,14,194,3,16,4,11
	.byte	'EN0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	624
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	399
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	624
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	624
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	624
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_SCU_EXTCON_Bits',0,14,205,3,3
	.word	28684
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,14,208,3,16,4,11
	.byte	'STEP',0,2
	.word	399
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	624
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	624
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	399
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	624
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_FDR_Bits',0,14,216,3,3
	.word	28902
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,14,219,3,16,4,11
	.byte	'FS0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	624
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	624
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_SCU_FMR_Bits',0,14,239,3,3
	.word	29065
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,14,242,3,16,4,11
	.byte	'MODREV',0,1
	.word	624
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	624
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_ID_Bits',0,14,247,3,3
	.word	29401
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,14,250,3,16,4,11
	.byte	'IPEN00',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	624
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	624
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	624
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	624
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SCU_IGCR_Bits',0,14,146,4,3
	.word	29508
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,14,149,4,16,4,11
	.byte	'P0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	601
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_IN_Bits',0,14,154,4,3
	.word	29960
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,14,157,4,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	624
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	624
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	624
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_IOCR_Bits',0,14,164,4,3
	.word	30059
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,14,167,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	601
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	399
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,14,177,4,3
	.word	30209
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,14,180,4,16,4,11
	.byte	'SEED',0,4
	.word	601
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	624
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	624
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	624
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,14,187,4,3
	.word	30447
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,14,190,4,16,4,11
	.byte	'LENGTH',0,2
	.word	399
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	601
	.byte	20,0,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,14,194,4,3
	.word	30608
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,14,197,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,14,200,4,3
	.word	30714
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,14,203,4,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	399
	.byte	14,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	399
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LCLCON0_Bits',0,14,211,4,3
	.word	30800
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,14,214,4,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	399
	.byte	14,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	399
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LCLCON1_Bits',0,14,222,4,3
	.word	30981
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,14,225,4,16,4,11
	.byte	'LCLT0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	399
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	399
	.byte	10,0,2,35,2,0,28
	.byte	'Ifx_SCU_LCLTEST_Bits',0,14,241,4,3
	.word	31162
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,14,244,4,16,4,11
	.byte	'DEPT',0,1
	.word	624
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	399
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_MANID_Bits',0,14,249,4,3
	.word	31506
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,14,252,4,16,4,11
	.byte	'PS0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	399
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	399
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_SCU_OMR_Bits',0,14,132,5,3
	.word	31617
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,14,135,5,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	624
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	624
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	624
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	624
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	624
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	624
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	624
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	624
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_OSCCON_Bits',0,14,156,5,3
	.word	31775
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,14,159,5,16,4,11
	.byte	'P0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	601
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_OUT_Bits',0,14,164,5,3
	.word	32186
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,14,167,5,16,4,11
	.byte	'CSEL0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	399
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	624
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	624
	.byte	6,0,2,35,3,0,28
	.byte	'Ifx_SCU_OVCCON_Bits',0,14,183,5,3
	.word	32287
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,14,186,5,16,4,11
	.byte	'OVEN0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	601
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,14,195,5,3
	.word	32620
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,14,198,5,16,4,11
	.byte	'PDIS0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	601
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDISC_Bits',0,14,203,5,3
	.word	32822
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,14,206,5,16,4,11
	.byte	'PD0',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	624
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	624
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	624
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	601
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDR_Bits',0,14,213,5,3
	.word	32933
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,14,216,5,16,4,11
	.byte	'PDR0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	601
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDRR_Bits',0,14,227,5,3
	.word	33066
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,14,230,5,16,4,11
	.byte	'DIVBY',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	399
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	624
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	624
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	624
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	624
	.byte	5,0,2,35,3,0,28
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,14,241,5,3
	.word	33269
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,14,244,5,16,4,11
	.byte	'K2DIV',0,1
	.word	624
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	624
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	624
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	601
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,14,250,5,3
	.word	33509
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,14,253,5,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	601
	.byte	25,0,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,14,135,6,3
	.word	33653
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,14,138,6,16,4,11
	.byte	'REQSLP',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	624
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	601
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR0_Bits',0,14,144,6,3
	.word	33875
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,14,147,6,16,4,11
	.byte	'REQSLP',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	624
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	601
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR1_Bits',0,14,153,6,3
	.word	34011
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,14,156,6,16,4,11
	.byte	'REQSLP',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	624
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	601
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR2_Bits',0,14,162,6,3
	.word	34147
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,14,165,6,16,4,11
	.byte	'REQSLP',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	624
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	601
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR3_Bits',0,14,171,6,3
	.word	34283
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,14,174,6,16,4,11
	.byte	'REQSLP',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	624
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	601
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR4_Bits',0,14,180,6,3
	.word	34419
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,14,183,6,16,4,11
	.byte	'REQSLP',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	624
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	601
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR5_Bits',0,14,189,6,3
	.word	34555
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,14,192,6,16,4,11
	.byte	'CPU0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	399
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	399
	.byte	12,0,2,35,2,0,28
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,14,206,6,3
	.word	34691
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,14,209,6,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	624
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	601
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	624
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	624
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,14,220,6,3
	.word	34963
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,14,223,6,16,4,11
	.byte	'LJTEN',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	399
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	624
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	399
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	624
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,14,242,6,3
	.word	35208
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,14,245,6,16,4,11
	.byte	'LJTCV',0,2
	.word	399
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	399
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	624
	.byte	6,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,14,250,6,3
	.word	35596
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,14,253,6,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	624
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	624
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	624
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	624
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,14,136,7,3
	.word	35714
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,14,139,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	624
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	624
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	624
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	624
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	624
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	399
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	624
	.byte	6,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,14,151,7,3
	.word	35957
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,14,154,7,16,4,11
	.byte	'ESR0',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	624
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	624
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	624
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	624
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	624
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	624
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	624
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	624
	.byte	2,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	624
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	399
	.byte	10,0,2,35,2,0,28
	.byte	'Ifx_SCU_RSTCON_Bits',0,14,168,7,3
	.word	36224
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,14,171,7,16,4,11
	.byte	'FRTO',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	399
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	624
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_RSTCON2_Bits',0,14,185,7,3
	.word	36504
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,14,188,7,16,4,11
	.byte	'reserved_0',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON3_Bits',0,14,191,7,3
	.word	36809
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,14,194,7,16,4,11
	.byte	'ESR0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	624
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	624
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	624
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	624
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	624
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	624
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	624
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	624
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,14,224,7,3
	.word	36890
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,14,227,7,16,4,11
	.byte	'reserved_0',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	13151
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	13151
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SCU_SEICON0_Bits',0,14,233,7,3
	.word	37458
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,14,236,7,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	601
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_SEICON1_Bits',0,14,245,7,3
	.word	37588
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,14,248,7,16,4,11
	.byte	'AE',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	399
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SEISR_Bits',0,14,130,8,3
	.word	37779
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,14,133,8,16,4,11
	.byte	'reserved_0',0,2
	.word	399
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	624
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	624
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_STCON_Bits',0,14,140,8,3
	.word	37957
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,14,143,8,16,4,11
	.byte	'MEM',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM1_Bits',0,14,146,8,3
	.word	38108
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,14,149,8,16,4,11
	.byte	'MEM',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM2_Bits',0,14,152,8,3
	.word	38180
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,14,155,8,16,4,11
	.byte	'MEM',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM3_Bits',0,14,158,8,3
	.word	38252
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,14,161,8,16,4,11
	.byte	'MEM',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM4_Bits',0,14,164,8,3
	.word	38324
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,14,167,8,16,4,11
	.byte	'MEM',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM5_Bits',0,14,170,8,3
	.word	38396
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,14,173,8,16,4,11
	.byte	'MEM',0,4
	.word	601
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM6_Bits',0,14,176,8,3
	.word	38468
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,14,179,8,16,4,11
	.byte	'HWCFG',0,1
	.word	624
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	624
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	624
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	624
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	624
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	624
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	624
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	624
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	624
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	624
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_STSTAT_Bits',0,14,195,8,3
	.word	38540
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,14,198,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	399
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,14,203,8,3
	.word	38869
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,14,206,8,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	624
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	624
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,14,213,8,3
	.word	38989
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,14,216,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	624
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	624
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SYSCON_Bits',0,14,228,8,3
	.word	39159
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,14,231,8,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	399
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	624
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	624
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	624
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	624
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	624
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,14,244,8,3
	.word	39422
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,14,247,8,16,4,11
	.byte	'K2DIV',0,1
	.word	624
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	601
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,14,251,8,3
	.word	39701
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,14,254,8,16,4,11
	.byte	'MODCFG',0,2
	.word	399
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,14,130,9,3
	.word	39805
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,14,133,9,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	624
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	601
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,14,143,9,3
	.word	39911
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,14,146,9,16,4,11
	.byte	'ESR0T',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	601
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,14,153,9,3
	.word	40134
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,14,156,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	624
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	624
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	624
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	624
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	624
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	624
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	624
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	624
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	624
	.byte	4,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	624
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	624
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,14,175,9,3
	.word	40282
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,14,178,9,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	624
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	624
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,14,185,9,3
	.word	40709
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,14,188,9,16,4,11
	.byte	'ESR0T',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	601
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSET_Bits',0,14,195,9,3
	.word	40882
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,14,198,9,16,4,11
	.byte	'ESR0T',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	601
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,14,205,9,3
	.word	41030
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,14,208,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	13151
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	13151
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,14,214,9,3
	.word	41180
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,14,217,9,16,4,11
	.byte	'reserved_0',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	624
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,14,230,9,3
	.word	41310
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,14,233,9,16,4,11
	.byte	'AE',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	624
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,14,246,9,3
	.word	41570
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,14,249,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	13151
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	13151
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	13151
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	13151
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,14,255,9,3
	.word	41793
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,14,130,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	624
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,14,143,10,3
	.word	41919
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,14,146,10,16,4,11
	.byte	'AE',0,1
	.word	624
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	624
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	624
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	624
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	624
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	624
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	624
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	624
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	624
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	624
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	399
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,14,159,10,3
	.word	42171
	.byte	12,14,167,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22661
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN00',0,14,172,10,3
	.word	42390
	.byte	12,14,175,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23220
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN01',0,14,180,10,3
	.word	42455
	.byte	12,14,183,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23299
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN10',0,14,188,10,3
	.word	42520
	.byte	12,14,191,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23859
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN11',0,14,196,10,3
	.word	42585
	.byte	12,14,199,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23940
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ARSTDIS',0,14,204,10,3
	.word	42650
	.byte	12,14,207,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24166
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON0',0,14,212,10,3
	.word	42715
	.byte	12,14,215,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24439
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON1',0,14,220,10,3
	.word	42780
	.byte	12,14,223,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24765
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON2',0,14,228,10,3
	.word	42845
	.byte	12,14,231,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25043
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON3',0,14,236,10,3
	.word	42910
	.byte	12,14,239,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25412
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON4',0,14,244,10,3
	.word	42975
	.byte	12,14,247,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25592
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON5',0,14,252,10,3
	.word	43040
	.byte	12,14,255,10,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25764
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON6',0,14,132,11,3
	.word	43105
	.byte	12,14,135,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25864
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON7',0,14,140,11,3
	.word	43170
	.byte	12,14,143,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25964
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON8',0,14,148,11,3
	.word	43235
	.byte	12,14,151,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26064
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CHIPID',0,14,156,11,3
	.word	43300
	.byte	12,14,159,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26267
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSCLIM',0,14,164,11,3
	.word	43364
	.byte	12,14,167,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26499
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSCSTAT',0,14,172,11,3
	.word	43429
	.byte	12,14,175,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26601
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EICON0',0,14,180,11,3
	.word	43495
	.byte	12,14,183,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26729
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EICON1',0,14,188,11,3
	.word	43559
	.byte	12,14,191,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26918
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EICR',0,14,196,11,3
	.word	43623
	.byte	12,14,199,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27282
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EIFILT',0,14,204,11,3
	.word	43685
	.byte	12,14,207,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27721
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EIFR',0,14,212,11,3
	.word	43749
	.byte	12,14,215,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27932
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EISR',0,14,220,11,3
	.word	43811
	.byte	12,14,223,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28108
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EMSR',0,14,228,11,3
	.word	43873
	.byte	12,14,231,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28302
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EMSSW',0,14,236,11,3
	.word	43935
	.byte	12,14,239,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28437
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,14,244,11,3
	.word	43998
	.byte	12,14,247,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28573
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ESROCFG',0,14,252,11,3
	.word	44071
	.byte	12,14,255,11,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28684
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EXTCON',0,14,132,12,3
	.word	44136
	.byte	12,14,135,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28902
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_FDR',0,14,140,12,3
	.word	44200
	.byte	12,14,143,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29065
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_FMR',0,14,148,12,3
	.word	44261
	.byte	12,14,151,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29401
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ID',0,14,156,12,3
	.word	44322
	.byte	12,14,159,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29508
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IGCR',0,14,164,12,3
	.word	44382
	.byte	12,14,167,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29960
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IN',0,14,172,12,3
	.word	44444
	.byte	12,14,175,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30059
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IOCR',0,14,180,12,3
	.word	44504
	.byte	12,14,183,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30209
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL0',0,14,188,12,3
	.word	44566
	.byte	12,14,191,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30447
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL1',0,14,196,12,3
	.word	44634
	.byte	12,14,199,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30608
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL2',0,14,204,12,3
	.word	44702
	.byte	12,14,207,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30714
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL3',0,14,212,12,3
	.word	44770
	.byte	12,14,215,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30800
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLCON0',0,14,220,12,3
	.word	44838
	.byte	12,14,223,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30981
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLCON1',0,14,228,12,3
	.word	44903
	.byte	12,14,231,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31162
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLTEST',0,14,236,12,3
	.word	44968
	.byte	12,14,239,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31506
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_MANID',0,14,244,12,3
	.word	45033
	.byte	12,14,247,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31617
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OMR',0,14,252,12,3
	.word	45096
	.byte	12,14,255,12,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31775
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OSCCON',0,14,132,13,3
	.word	45157
	.byte	12,14,135,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32186
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OUT',0,14,140,13,3
	.word	45221
	.byte	12,14,143,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32287
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OVCCON',0,14,148,13,3
	.word	45282
	.byte	12,14,151,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32620
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OVCENABLE',0,14,156,13,3
	.word	45346
	.byte	12,14,159,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32822
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDISC',0,14,164,13,3
	.word	45413
	.byte	12,14,167,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32933
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDR',0,14,172,13,3
	.word	45476
	.byte	12,14,175,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33066
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDRR',0,14,180,13,3
	.word	45537
	.byte	12,14,183,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33269
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLCON0',0,14,188,13,3
	.word	45599
	.byte	12,14,191,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33509
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLCON1',0,14,196,13,3
	.word	45667
	.byte	12,14,199,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33653
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLSTAT',0,14,204,13,3
	.word	45735
	.byte	12,14,207,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33875
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR0',0,14,212,13,3
	.word	45803
	.byte	12,14,215,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34011
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR1',0,14,220,13,3
	.word	45867
	.byte	12,14,223,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34147
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR2',0,14,228,13,3
	.word	45931
	.byte	12,14,231,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34283
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR3',0,14,236,13,3
	.word	45995
	.byte	12,14,239,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34419
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR4',0,14,244,13,3
	.word	46059
	.byte	12,14,247,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34555
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR5',0,14,252,13,3
	.word	46123
	.byte	12,14,255,13,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34691
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSTAT0',0,14,132,14,3
	.word	46187
	.byte	12,14,135,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34963
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWCR1',0,14,140,14,3
	.word	46252
	.byte	12,14,143,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35208
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMTRCSR0',0,14,148,14,3
	.word	46317
	.byte	12,14,151,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35596
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMTRCSR1',0,14,156,14,3
	.word	46383
	.byte	12,14,159,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35714
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMTRCSR2',0,14,164,14,3
	.word	46449
	.byte	12,14,167,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35957
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMTRCSR3',0,14,172,14,3
	.word	46515
	.byte	12,14,175,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36224
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON',0,14,180,14,3
	.word	46581
	.byte	12,14,183,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36504
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON2',0,14,188,14,3
	.word	46645
	.byte	12,14,191,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36809
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON3',0,14,196,14,3
	.word	46710
	.byte	12,14,199,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36890
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTSTAT',0,14,204,14,3
	.word	46775
	.byte	12,14,207,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37458
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SEICON0',0,14,212,14,3
	.word	46840
	.byte	12,14,215,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37588
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SEICON1',0,14,220,14,3
	.word	46905
	.byte	12,14,223,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37779
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SEISR',0,14,228,14,3
	.word	46970
	.byte	12,14,231,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37957
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STCON',0,14,236,14,3
	.word	47033
	.byte	12,14,239,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38108
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM1',0,14,244,14,3
	.word	47096
	.byte	12,14,247,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38180
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM2',0,14,252,14,3
	.word	47160
	.byte	12,14,255,14,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38252
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM3',0,14,132,15,3
	.word	47224
	.byte	12,14,135,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38324
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM4',0,14,140,15,3
	.word	47288
	.byte	12,14,143,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38396
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM5',0,14,148,15,3
	.word	47352
	.byte	12,14,151,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38468
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM6',0,14,156,15,3
	.word	47416
	.byte	12,14,159,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38540
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STSTAT',0,14,164,15,3
	.word	47480
	.byte	12,14,167,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38869
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SWAPCTRL',0,14,172,15,3
	.word	47544
	.byte	12,14,175,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38989
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SWRSTCON',0,14,180,15,3
	.word	47610
	.byte	12,14,183,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39159
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSCON',0,14,188,15,3
	.word	47676
	.byte	12,14,191,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39422
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLCON0',0,14,196,15,3
	.word	47740
	.byte	12,14,199,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39701
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLCON1',0,14,204,15,3
	.word	47808
	.byte	12,14,207,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39805
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLCON2',0,14,212,15,3
	.word	47876
	.byte	12,14,215,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39911
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLSTAT',0,14,220,15,3
	.word	47944
	.byte	12,14,223,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40134
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPCLR',0,14,228,15,3
	.word	48012
	.byte	12,14,231,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40282
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPDIS0',0,14,236,15,3
	.word	48077
	.byte	12,14,239,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40709
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPDIS1',0,14,244,15,3
	.word	48143
	.byte	12,14,247,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40882
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSET',0,14,252,15,3
	.word	48209
	.byte	12,14,255,15,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41030
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSTAT',0,14,132,16,3
	.word	48274
	.byte	12,14,135,16,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41180
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTCPU_CON0',0,14,140,16,3
	.word	48340
	.byte	12,14,143,16,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41310
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTCPU_CON1',0,14,148,16,3
	.word	48409
	.byte	12,14,151,16,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41570
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTCPU_SR',0,14,156,16,3
	.word	48478
	.byte	12,14,159,16,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41793
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_CON0',0,14,164,16,3
	.word	48545
	.byte	12,14,167,16,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41919
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_CON1',0,14,172,16,3
	.word	48612
	.byte	12,14,175,16,9,4,13
	.byte	'U',0
	.word	601
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	617
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42171
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_SR',0,14,180,16,3
	.word	48679
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,14,192,16,25,4,13
	.byte	'ESRCFGX',0
	.word	43998
	.byte	4,2,35,0,0,14
	.word	48744
	.byte	28
	.byte	'Ifx_SCU_ESRCFGX',0,14,195,16,3
	.word	48785
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU',0,14,210,16,25,12,13
	.byte	'CON0',0
	.word	48340
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	48409
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	48478
	.byte	4,2,35,8,0,14
	.word	48815
	.byte	28
	.byte	'Ifx_SCU_WDTCPU',0,14,215,16,3
	.word	48878
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,14,230,16,25,12,13
	.byte	'CON0',0
	.word	48545
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	48612
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	48679
	.byte	4,2,35,8,0,14
	.word	48907
	.byte	28
	.byte	'Ifx_SCU_WDTS',0,14,235,16,3
	.word	48968
	.byte	28
	.byte	'Ifx_SRC_SRCR_Bits',0,5,85,3
	.word	641
	.byte	28
	.byte	'Ifx_SRC_SRCR',0,5,98,3
	.word	931
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,5,110,25,4,13
	.byte	'SB',0
	.word	931
	.byte	4,2,35,0,0,14
	.word	49042
	.byte	28
	.byte	'Ifx_SRC_CPU_CPU',0,5,113,3
	.word	49077
	.byte	30,12
	.word	49042
	.byte	31,2,0,14
	.word	49106
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,5,128,1,25,12,13
	.byte	'CPU',0
	.word	49115
	.byte	12,2,35,0,0,14
	.word	49120
	.byte	28
	.byte	'Ifx_SRC_CPU',0,5,131,1,3
	.word	49153
	.byte	30,8
	.word	931
	.byte	31,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,5,146,1,25,8,13
	.byte	'SR',0
	.word	49179
	.byte	8,2,35,0,0,14
	.word	49188
	.byte	28
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,5,149,1,3
	.word	49234
	.byte	14
	.word	49188
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,5,164,1,25,8,13
	.byte	'CERBERUS',0
	.word	49274
	.byte	8,2,35,0,0,14
	.word	49279
	.byte	28
	.byte	'Ifx_SRC_CERBERUS',0,5,167,1,3
	.word	49322
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,5,182,1,25,12,13
	.byte	'TX',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	931
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	931
	.byte	4,2,35,8,0,14
	.word	49353
	.byte	28
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,5,187,1,3
	.word	49420
	.byte	30,144,1
	.word	49353
	.byte	31,11,0,14
	.word	49456
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,5,202,1,25,144,1,13
	.byte	'ASCLIN',0
	.word	49466
	.byte	144,1,2,35,0,0,14
	.word	49471
	.byte	28
	.byte	'Ifx_SRC_ASCLIN',0,5,205,1,3
	.word	49512
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,5,220,1,25,20,13
	.byte	'TX',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	931
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	931
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	931
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	931
	.byte	4,2,35,16,0,14
	.word	49541
	.byte	28
	.byte	'Ifx_SRC_QSPI_QSPI',0,5,227,1,3
	.word	49627
	.byte	30,100
	.word	49541
	.byte	31,4,0,14
	.word	49659
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,5,242,1,25,100,13
	.byte	'QSPI',0
	.word	49668
	.byte	100,2,35,0,0,14
	.word	49673
	.byte	28
	.byte	'Ifx_SRC_QSPI',0,5,245,1,3
	.word	49708
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,5,132,2,25,4,13
	.byte	'SR',0
	.word	931
	.byte	4,2,35,0,0,14
	.word	49735
	.byte	28
	.byte	'Ifx_SRC_HSCT_HSCT',0,5,135,2,3
	.word	49773
	.byte	30,4
	.word	49735
	.byte	31,0,0,14
	.word	49805
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,5,150,2,25,4,13
	.byte	'HSCT',0
	.word	49814
	.byte	4,2,35,0,0,14
	.word	49819
	.byte	28
	.byte	'Ifx_SRC_HSCT',0,5,153,2,3
	.word	49854
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,5,168,2,25,16,13
	.byte	'COK',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	931
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	931
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	931
	.byte	4,2,35,12,0,14
	.word	49881
	.byte	28
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,5,174,2,3
	.word	49962
	.byte	30,64
	.word	49881
	.byte	31,3,0,14
	.word	49997
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,5,189,2,25,68,13
	.byte	'CH',0
	.word	50006
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	931
	.byte	4,2,35,64,0,14
	.word	50011
	.byte	28
	.byte	'Ifx_SRC_HSSL_HSSL',0,5,193,2,3
	.word	50062
	.byte	30,68
	.word	50011
	.byte	31,0,0,14
	.word	50094
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,5,208,2,25,68,13
	.byte	'HSSL',0
	.word	50103
	.byte	68,2,35,0,0,14
	.word	50108
	.byte	28
	.byte	'Ifx_SRC_HSSL',0,5,211,2,3
	.word	50143
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,5,226,2,25,16,13
	.byte	'DTR',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	931
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	931
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	21807
	.byte	4,2,35,12,0,14
	.word	50170
	.byte	28
	.byte	'Ifx_SRC_I2C_I2C',0,5,232,2,3
	.word	50251
	.byte	30,16
	.word	50170
	.byte	31,0,0,14
	.word	50281
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,5,247,2,25,16,13
	.byte	'I2C',0
	.word	50290
	.byte	16,2,35,0,0,14
	.word	50295
	.byte	28
	.byte	'Ifx_SRC_I2C',0,5,250,2,3
	.word	50328
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,5,137,3,25,4,13
	.byte	'SR',0
	.word	931
	.byte	4,2,35,0,0,14
	.word	50354
	.byte	28
	.byte	'Ifx_SRC_SENT_SENT',0,5,140,3,3
	.word	50392
	.byte	30,40
	.word	50354
	.byte	31,9,0,14
	.word	50424
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,5,155,3,25,40,13
	.byte	'SENT',0
	.word	50433
	.byte	40,2,35,0,0,14
	.word	50438
	.byte	28
	.byte	'Ifx_SRC_SENT',0,5,158,3,3
	.word	50473
	.byte	30,20
	.word	931
	.byte	31,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,5,173,3,25,20,13
	.byte	'SR',0
	.word	50500
	.byte	20,2,35,0,0,14
	.word	50509
	.byte	28
	.byte	'Ifx_SRC_MSC_MSC',0,5,176,3,3
	.word	50545
	.byte	30,40
	.word	50509
	.byte	31,1,0,14
	.word	50575
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,5,191,3,25,40,13
	.byte	'MSC',0
	.word	50584
	.byte	40,2,35,0,0,14
	.word	50589
	.byte	28
	.byte	'Ifx_SRC_MSC',0,5,194,3,3
	.word	50622
	.byte	30,16
	.word	931
	.byte	31,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,5,209,3,25,16,13
	.byte	'SR',0
	.word	50648
	.byte	16,2,35,0,0,14
	.word	50657
	.byte	28
	.byte	'Ifx_SRC_CCU6_CCU',0,5,212,3,3
	.word	50694
	.byte	30,32
	.word	50657
	.byte	31,1,0,14
	.word	50725
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,5,227,3,25,32,13
	.byte	'CCU',0
	.word	50734
	.byte	32,2,35,0,0,14
	.word	50739
	.byte	28
	.byte	'Ifx_SRC_CCU6',0,5,230,3,3
	.word	50773
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,5,245,3,25,24,13
	.byte	'CIRQ',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	931
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	931
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	931
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	931
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	931
	.byte	4,2,35,20,0,14
	.word	50800
	.byte	28
	.byte	'Ifx_SRC_GPT12_GPT12',0,5,253,3,3
	.word	50902
	.byte	30,24
	.word	50800
	.byte	31,0,0,14
	.word	50936
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,5,140,4,25,24,13
	.byte	'GPT12',0
	.word	50945
	.byte	24,2,35,0,0,14
	.word	50950
	.byte	28
	.byte	'Ifx_SRC_GPT12',0,5,143,4,3
	.word	50987
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,5,158,4,25,8,13
	.byte	'SR',0
	.word	49179
	.byte	8,2,35,0,0,14
	.word	51015
	.byte	28
	.byte	'Ifx_SRC_STM_STM',0,5,161,4,3
	.word	51051
	.byte	30,24
	.word	51015
	.byte	31,2,0,14
	.word	51081
	.byte	10
	.byte	'_Ifx_SRC_STM',0,5,176,4,25,24,13
	.byte	'STM',0
	.word	51090
	.byte	24,2,35,0,0,14
	.word	51095
	.byte	28
	.byte	'Ifx_SRC_STM',0,5,179,4,3
	.word	51128
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,5,194,4,25,4,13
	.byte	'SR',0
	.word	931
	.byte	4,2,35,0,0,14
	.word	51154
	.byte	28
	.byte	'Ifx_SRC_FCE_FCE0',0,5,197,4,3
	.word	51191
	.byte	14
	.word	51154
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,5,212,4,25,4,13
	.byte	'FCE0',0
	.word	51222
	.byte	4,2,35,0,0,14
	.word	51227
	.byte	28
	.byte	'Ifx_SRC_FCE',0,5,215,4,3
	.word	51261
	.byte	30,32
	.word	624
	.byte	31,31,0,30,128,4
	.word	931
	.byte	31,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,5,230,4,25,176,4,13
	.byte	'ERR',0
	.word	50648
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	51287
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	51296
	.byte	128,4,2,35,48,0,14
	.word	51306
	.byte	28
	.byte	'Ifx_SRC_DMA_DMA',0,5,235,4,3
	.word	51378
	.byte	30,176,4
	.word	51306
	.byte	31,0,0,14
	.word	51408
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,5,250,4,25,176,4,13
	.byte	'DMA',0
	.word	51418
	.byte	176,4,2,35,0,0,14
	.word	51423
	.byte	28
	.byte	'Ifx_SRC_DMA',0,5,253,4,3
	.word	51458
	.byte	30,40
	.word	931
	.byte	31,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,5,140,5,25,40,13
	.byte	'SR',0
	.word	51484
	.byte	40,2,35,0,0,14
	.word	51493
	.byte	28
	.byte	'Ifx_SRC_GETH_GETH',0,5,143,5,3
	.word	51531
	.byte	30,40
	.word	51493
	.byte	31,0,0,14
	.word	51563
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,5,158,5,25,40,13
	.byte	'GETH',0
	.word	51572
	.byte	40,2,35,0,0,14
	.word	51577
	.byte	28
	.byte	'Ifx_SRC_GETH',0,5,161,5,3
	.word	51612
	.byte	30,64
	.word	931
	.byte	31,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,5,176,5,25,64,13
	.byte	'INT',0
	.word	51639
	.byte	64,2,35,0,0,14
	.word	51648
	.byte	28
	.byte	'Ifx_SRC_CAN_CAN',0,5,179,5,3
	.word	51685
	.byte	30,128,1
	.word	51648
	.byte	31,1,0,14
	.word	51715
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,5,194,5,25,128,1,13
	.byte	'CAN',0
	.word	51725
	.byte	128,1,2,35,0,0,14
	.word	51730
	.byte	28
	.byte	'Ifx_SRC_CAN',0,5,197,5,3
	.word	51765
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,5,212,5,25,16,13
	.byte	'SR0',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	931
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	931
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	931
	.byte	4,2,35,12,0,14
	.word	51791
	.byte	28
	.byte	'Ifx_SRC_VADC_G',0,5,218,5,3
	.word	51866
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,5,237,5,25,4,13
	.byte	'SR0',0
	.word	931
	.byte	4,2,35,0,0,14
	.word	51895
	.byte	28
	.byte	'Ifx_SRC_VADC_FC',0,5,240,5,3
	.word	51932
	.byte	30,64
	.word	51791
	.byte	31,3,0,14
	.word	51962
	.byte	30,64
	.word	624
	.byte	31,63,0,14
	.word	51791
	.byte	14
	.word	51791
	.byte	14
	.word	51791
	.byte	14
	.word	51791
	.byte	30,16
	.word	51895
	.byte	31,3,0,14
	.word	52005
	.byte	30,32
	.word	51791
	.byte	31,1,0,14
	.word	52019
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,5,128,6,25,128,2,13
	.byte	'G',0
	.word	51971
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	51976
	.byte	64,2,35,64,13
	.byte	'G8',0
	.word	51985
	.byte	16,3,35,128,1,13
	.byte	'G9',0
	.word	51990
	.byte	16,3,35,144,1,13
	.byte	'G10',0
	.word	51995
	.byte	16,3,35,160,1,13
	.byte	'G11',0
	.word	52000
	.byte	16,3,35,176,1,13
	.byte	'FC',0
	.word	52014
	.byte	16,3,35,192,1,13
	.byte	'reserved_D0',0
	.word	21882
	.byte	16,3,35,208,1,13
	.byte	'CG',0
	.word	52028
	.byte	32,3,35,224,1,0,14
	.word	52033
	.byte	28
	.byte	'Ifx_SRC_VADC',0,5,139,6,3
	.word	52189
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,5,154,6,25,8,13
	.byte	'SRM',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	931
	.byte	4,2,35,4,0,14
	.word	52216
	.byte	28
	.byte	'Ifx_SRC_DSADC_DSADC',0,5,158,6,3
	.word	52270
	.byte	30,48
	.word	52216
	.byte	31,5,0,14
	.word	52304
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,5,173,6,25,48,13
	.byte	'DSADC',0
	.word	52313
	.byte	48,2,35,0,0,14
	.word	52318
	.byte	28
	.byte	'Ifx_SRC_DSADC',0,5,176,6,3
	.word	52355
	.byte	30,8
	.word	624
	.byte	31,7,0,10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,5,191,6,25,48,13
	.byte	'INT0',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	931
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	931
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	931
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	931
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	931
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	931
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	931
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	931
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	931
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	52383
	.byte	8,2,35,40,0,14
	.word	52392
	.byte	28
	.byte	'Ifx_SRC_ERAY_ERAY',0,5,204,6,3
	.word	52587
	.byte	30,48
	.word	52392
	.byte	31,0,0,14
	.word	52619
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,5,219,6,25,48,13
	.byte	'ERAY',0
	.word	52628
	.byte	48,2,35,0,0,14
	.word	52633
	.byte	28
	.byte	'Ifx_SRC_ERAY',0,5,222,6,3
	.word	52668
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,5,237,6,25,8,13
	.byte	'HSM',0
	.word	49179
	.byte	8,2,35,0,0,14
	.word	52695
	.byte	28
	.byte	'Ifx_SRC_HSM_HSM',0,5,240,6,3
	.word	52732
	.byte	30,8
	.word	52695
	.byte	31,0,0,14
	.word	52762
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,5,255,6,25,8,13
	.byte	'HSM',0
	.word	52771
	.byte	8,2,35,0,0,14
	.word	52776
	.byte	28
	.byte	'Ifx_SRC_HSM',0,5,130,7,3
	.word	52809
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,5,145,7,25,16,13
	.byte	'SCUERU',0
	.word	50648
	.byte	16,2,35,0,0,14
	.word	52835
	.byte	28
	.byte	'Ifx_SRC_SCU',0,5,148,7,3
	.word	52871
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,5,163,7,25,4,13
	.byte	'SR',0
	.word	931
	.byte	4,2,35,0,0,14
	.word	52897
	.byte	28
	.byte	'Ifx_SRC_PMS_PMS',0,5,166,7,3
	.word	52933
	.byte	30,16
	.word	52897
	.byte	31,3,0,14
	.word	52963
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,5,181,7,25,16,13
	.byte	'PMS',0
	.word	52972
	.byte	16,2,35,0,0,14
	.word	52977
	.byte	28
	.byte	'Ifx_SRC_PMS',0,5,184,7,3
	.word	53010
	.byte	30,12
	.word	931
	.byte	31,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,5,199,7,25,12,13
	.byte	'SR',0
	.word	53036
	.byte	12,2,35,0,0,14
	.word	53045
	.byte	28
	.byte	'Ifx_SRC_SMU_SMU',0,5,202,7,3
	.word	53081
	.byte	30,12
	.word	53045
	.byte	31,0,0,14
	.word	53111
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,5,217,7,25,12,13
	.byte	'SMU',0
	.word	53120
	.byte	12,2,35,0,0,14
	.word	53125
	.byte	28
	.byte	'Ifx_SRC_SMU',0,5,220,7,3
	.word	53158
	.byte	30,32
	.word	931
	.byte	31,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,5,235,7,25,32,13
	.byte	'SR',0
	.word	53184
	.byte	32,2,35,0,0,14
	.word	53193
	.byte	28
	.byte	'Ifx_SRC_PSI5_PSI5',0,5,238,7,3
	.word	53231
	.byte	30,32
	.word	53193
	.byte	31,0,0,14
	.word	53263
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,5,253,7,25,32,13
	.byte	'PSI5',0
	.word	53272
	.byte	32,2,35,0,0,14
	.word	53277
	.byte	28
	.byte	'Ifx_SRC_PSI5',0,5,128,8,3
	.word	53312
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,5,143,8,25,24,13
	.byte	'LI0',0
	.word	931
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	931
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	931
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	931
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	931
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	931
	.byte	4,2,35,20,0,14
	.word	53339
	.byte	28
	.byte	'Ifx_SRC_DAM_DAM',0,5,151,8,3
	.word	53440
	.byte	30,24
	.word	53339
	.byte	31,0,0,14
	.word	53470
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,5,166,8,25,24,13
	.byte	'DAM',0
	.word	53479
	.byte	24,2,35,0,0,14
	.word	53484
	.byte	28
	.byte	'Ifx_SRC_DAM',0,5,169,8,3
	.word	53517
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,5,184,8,25,32,13
	.byte	'SR',0
	.word	53184
	.byte	32,2,35,0,0,14
	.word	53543
	.byte	28
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,5,187,8,3
	.word	53583
	.byte	30,32
	.word	53543
	.byte	31,0,0,14
	.word	53617
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,5,202,8,25,32,13
	.byte	'PSI5S',0
	.word	53626
	.byte	32,2,35,0,0,14
	.word	53631
	.byte	28
	.byte	'Ifx_SRC_PSI5S',0,5,205,8,3
	.word	53668
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,5,220,8,25,32,13
	.byte	'SR',0
	.word	53184
	.byte	32,2,35,0,0,14
	.word	53696
	.byte	28
	.byte	'Ifx_SRC_GPSR_GPSR',0,5,223,8,3
	.word	53734
	.byte	30,96
	.word	53696
	.byte	31,2,0,14
	.word	53766
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,5,238,8,25,96,13
	.byte	'GPSR',0
	.word	53775
	.byte	96,2,35,0,0,14
	.word	53780
	.byte	28
	.byte	'Ifx_SRC_GPSR',0,5,241,8,3
	.word	53815
	.byte	28
	.byte	'IfxSmu_InternalAlarmAction',0,6,134,1,3
	.word	10550
	.byte	24,6,147,1,9,1,25
	.byte	'IfxSmu_InterruptRequest_0',0,0,25
	.byte	'IfxSmu_InterruptRequest_1',0,1,25
	.byte	'IfxSmu_InterruptRequest_2',0,2,0,28
	.byte	'IfxSmu_InterruptRequest',0,6,152,1,3
	.word	53878
	.byte	24,6,156,1,9,1,25
	.byte	'IfxSmu_PortControlHwDir_fsp0AndFsp1Input',0,0,25
	.byte	'IfxSmu_PortControlHwDir_fsp0OutputAndFsp1Input',0,1,25
	.byte	'IfxSmu_PortControlHwDir_fsp0AndFsp1Output',0,3,0,28
	.byte	'IfxSmu_PortControlHwDir',0,6,161,1,3
	.word	54002
	.byte	24,6,165,1,9,1,25
	.byte	'IfxSmu_PortControlHwEnable_fsp0AndFsp1Disabled',0,0,25
	.byte	'IfxSmu_PortControlHwEnable_fsp0EnabledAndFsp1Disabled',0,1,25
	.byte	'IfxSmu_PortControlHwEnable_fsp0AndFsp1Enabled',0,3,0,28
	.byte	'IfxSmu_PortControlHwEnable',0,6,170,1,3
	.word	54178
	.byte	24,6,184,1,9,1,25
	.byte	'IfxSmu_SuspendMode_none',0,0,25
	.byte	'IfxSmu_SuspendMode_hard',0,1,25
	.byte	'IfxSmu_SuspendMode_soft',0,2,0,28
	.byte	'IfxSmu_SuspendMode',0,6,189,1,3
	.word	54374
	.byte	24,6,195,1,9,1,25
	.byte	'IfxSmu_AlarmExecutionStatus_irq0',0,0,25
	.byte	'IfxSmu_AlarmExecutionStatus_irq1',0,1,25
	.byte	'IfxSmu_AlarmExecutionStatus_irq2',0,2,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst0',0,3,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst1',0,4,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst2',0,5,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst3',0,6,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst4',0,7,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst5',0,8,25
	.byte	'IfxSmu_AlarmExecutionStatus_nmi',0,9,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst',0,10,25
	.byte	'IfxSmu_AlarmExecutionStatus_ems',0,11,25
	.byte	'IfxSmu_AlarmExecutionStatus_irq0aem',0,16,25
	.byte	'IfxSmu_AlarmExecutionStatus_irq1aem',0,17,25
	.byte	'IfxSmu_AlarmExecutionStatus_irq2aem',0,18,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst0aem',0,19,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst1aem',0,20,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst2aem',0,21,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst3aem',0,22,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst4aem',0,23,25
	.byte	'IfxSmu_AlarmExecutionStatus_rst5aem',0,24,25
	.byte	'IfxSmu_AlarmExecutionStatus_nmiaem',0,25,25
	.byte	'IfxSmu_AlarmExecutionStatus_rstaem',0,26,25
	.byte	'IfxSmu_AlarmExecutionStatus_emsaem',0,27,0,28
	.byte	'IfxSmu_AlarmExecutionStatus',0,6,221,1,3
	.word	54487
	.byte	24,15,66,9,1,25
	.byte	'IfxSrc_Tos_cpu0',0,0,25
	.byte	'IfxSrc_Tos_dma',0,1,25
	.byte	'IfxSrc_Tos_cpu1',0,2,25
	.byte	'IfxSrc_Tos_cpu2',0,3,0,28
	.byte	'IfxSrc_Tos',0,15,72,3
	.word	55401
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L16:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,38,0,73,19,0,0,16,46,1,3,8,54,15,39,12,63,12,60,12,0,0
	.byte	17,5,0,73,19,0,0,18,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,19,5,0,3,8,73,19,0,0,20,46,1,49,19,0,0
	.byte	21,5,0,49,19,0,0,22,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,23,46,0,3,8,58,15,59
	.byte	15,57,15,54,15,39,12,63,12,60,12,0,0,24,4,1,58,15,59,15,57,15,11,15,0,0,25,40,0,3,8,28,13,0,0,26,46,1
	.byte	3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,27,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12
	.byte	60,12,0,0,28,22,0,3,8,58,15,59,15,57,15,73,19,0,0,29,21,0,54,15,0,0,30,1,1,11,15,73,19,0,0,31,33,0,47
	.byte	15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L17:
	.word	.L65-.L64
.L64:
	.half	3
	.word	.L67-.L66
.L66:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Smu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\_Impl',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxSrc.h',0,3,0,0
	.byte	'IfxSrc_regdef.h',0,4,0,0
	.byte	'IfxSmu.h',0,5,0,0
	.byte	'IfxSmu_cfg.h',0,6,0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,4,0,0
	.byte	'IfxSmu_regdef.h',0,4,0,0
	.byte	'IfxScu_cfg.h',0,6,0,0
	.byte	'IfxScu_regdef.h',0,4,0,0
	.byte	'IfxSrc_cfg.h',0,6,0,0,0
.L67:
.L65:
	.sdecl	'.debug_info',debug,cluster('config_SMU_reset')
	.sect	'.debug_info'
.L18:
	.word	384
	.half	3
	.word	.L19
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\Debug\\',0,12,1
	.word	.L21,.L20
	.byte	2
	.word	.L14
	.byte	3
	.byte	'config_SMU_reset',0,1,39,6,1,1,1
	.word	.L7,.L38,.L6
	.byte	4
	.word	.L7,.L38
	.byte	5
	.word	.L39,.L7,.L40
	.byte	6
	.word	.L41,.L42
	.byte	7
	.byte	'password',0,2,131,5,19
	.word	.L43,.L44
	.byte	0,0,5
	.word	.L45,.L40,.L46
	.byte	8
	.word	.L47,.L48
	.byte	9
	.word	.L49,.L50
	.byte	0,5
	.word	.L39,.L51,.L52
	.byte	10
	.word	.L41,.L51,.L52
	.byte	7
	.byte	'password',0,2,131,5,19
	.word	.L43,.L53
	.byte	0,0,5
	.word	.L54,.L52,.L55
	.byte	8
	.word	.L56,.L57
	.byte	11
	.word	.L58,.L52,.L55
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('config_SMU_reset')
	.sect	'.debug_abbrev'
.L19:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,85,6,0,0,7
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0,10,11,1,49,16,17,1
	.byte	18,1,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('config_SMU_reset')
	.sect	'.debug_line'
.L20:
	.word	.L69-.L68
.L68:
	.half	3
	.word	.L71-.L70
.L70:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L71:
	.byte	4,2,5,33,7,0,5,2
	.word	.L7
	.byte	3,136,5,1,5,5,9
	.half	.L40-.L7
	.byte	3,190,127,1,5,37,7,9
	.half	.L72-.L40
	.byte	3,5,1,5,25,9
	.half	.L60-.L72
	.byte	3,126,1,5,33,9
	.half	.L2-.L60
	.byte	3,9,1,5,22,3,119,1,5,5,9
	.half	.L61-.L2
	.byte	3,125,1,5,33,9
	.half	.L73-.L61
	.byte	3,12,1,5,39,3,1,1,5,62,9
	.half	.L74-.L73
	.byte	3,127,1,5,21,3,126,1,5,27,9
	.half	.L3-.L74
	.byte	3,6,1,5,40,9
	.half	.L75-.L3
	.byte	1,4,1,5,17,7,9
	.half	.L46-.L75
	.byte	3,213,123,1,5,22,9
	.half	.L76-.L46
	.byte	1,4,2,5,33,9
	.half	.L51-.L76
	.byte	3,221,4,1,5,5,9
	.half	.L52-.L51
	.byte	3,42,1,5,37,7,9
	.half	.L77-.L52
	.byte	3,5,1,5,25,9
	.half	.L78-.L77
	.byte	3,126,1,5,33,9
	.half	.L4-.L78
	.byte	3,9,1,5,39,9
	.half	.L63-.L4
	.byte	3,1,1,5,62,9
	.half	.L79-.L63
	.byte	3,127,1,5,21,3,126,1,5,27,9
	.half	.L5-.L79
	.byte	3,6,1,5,40,9
	.half	.L80-.L5
	.byte	1,4,1,5,33,7,9
	.half	.L55-.L80
	.byte	3,238,122,1,5,27,9
	.half	.L81-.L55
	.byte	3,2,1,5,57,9
	.half	.L82-.L81
	.byte	1,5,31,9
	.half	.L83-.L82
	.byte	3,2,1,5,28,9
	.half	.L84-.L83
	.byte	3,3,1,5,1,7,9
	.half	.L22-.L84
	.byte	3,1,0,1,1
.L69:
	.sdecl	'.debug_ranges',debug,cluster('config_SMU_reset')
	.sect	'.debug_ranges'
.L21:
	.word	-1,.L7,0,.L22-.L7,0,0
.L42:
	.word	-1,.L7,0,.L40-.L7,-1,.L9,0,.L37-.L9,0,0
.L50:
	.word	-1,.L7,.L40-.L7,.L46-.L7,-1,.L11,0,.L32-.L11,0,0
	.sdecl	'.debug_info',debug,cluster('trigger_SMU_reset')
	.sect	'.debug_info'
.L23:
	.word	220
	.half	3
	.word	.L24
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\Debug\\',0,12,1
	.word	.L26,.L25
	.byte	2
	.word	.L14
	.byte	3
	.byte	'trigger_SMU_reset',0,1,60,6,1,1,1
	.word	.L13,.L59,.L12
	.byte	4
	.word	.L13,.L59
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('trigger_SMU_reset')
	.sect	'.debug_abbrev'
.L24:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('trigger_SMU_reset')
	.sect	'.debug_line'
.L25:
	.word	.L86-.L85
.L85:
	.half	3
	.word	.L88-.L87
.L87:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0,0,0,0,0
.L88:
	.byte	5,27,7,0,5,2
	.word	.L13
	.byte	3,61,1,5,1,9
	.half	.L27-.L13
	.byte	3,1,0,1,1
.L86:
	.sdecl	'.debug_ranges',debug,cluster('trigger_SMU_reset')
	.sect	'.debug_ranges'
.L26:
	.word	-1,.L13,0,.L27-.L13,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L28:
	.word	201
	.half	3
	.word	.L29
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\Debug\\',0,12,1
	.word	.L31,.L30
	.byte	2
	.word	.L14
	.byte	3
	.byte	'.cocofun_3',0,1,39,6,1
	.word	.L11,.L32,.L10
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L29:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L30:
	.word	.L90-.L89
.L89:
	.half	3
	.word	.L92-.L91
.L91:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L92:
	.byte	4,2,5,43,7,0,5,2
	.word	.L11
	.byte	3,204,4,1,5,37,9
	.half	.L93-.L11
	.byte	3,127,1,5,43,9
	.half	.L94-.L93
	.byte	3,1,1,5,37,9
	.half	.L95-.L94
	.byte	3,127,1,5,66,9
	.half	.L96-.L95
	.byte	1,9
	.half	.L32-.L96
	.byte	0,1,1,4,2,5,43,0,5,2
	.word	.L11
	.byte	3,184,5,1,5,37,9
	.half	.L93-.L11
	.byte	3,127,1,5,43,9
	.half	.L94-.L93
	.byte	3,1,1,5,37,9
	.half	.L95-.L94
	.byte	3,127,1,5,66,9
	.half	.L96-.L95
	.byte	1,3,148,127,1,7,9
	.half	.L32-.L96
	.byte	0,1,1
.L90:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L31:
	.word	-1,.L11,0,.L32-.L11,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L33:
	.word	201
	.half	3
	.word	.L34
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\Debug\\',0,12,1
	.word	.L36,.L35
	.byte	2
	.word	.L14
	.byte	3
	.byte	'.cocofun_4',0,1,39,6,1
	.word	.L9,.L37,.L8
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L34:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L35:
	.word	.L98-.L97
.L97:
	.half	3
	.word	.L100-.L99
.L99:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_SMU_Reset_Alarm\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\SMU_Reset_Alarm.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L100:
	.byte	4,2,5,33,7,0,5,2
	.word	.L9
	.byte	3,136,5,1,5,14,9
	.half	.L62-.L9
	.byte	3,1,1,5,24,3,189,127,1,9
	.half	.L37-.L62
	.byte	0,1,1,4,2,5,33,0,5,2
	.word	.L9
	.byte	3,136,5,1,5,14,9
	.half	.L62-.L9
	.byte	3,1,1,5,24,3,41,1,9
	.half	.L101-.L62
	.byte	3,148,127,1,7,9
	.half	.L37-.L101
	.byte	0,1,1
.L98:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L36:
	.word	-1,.L9,0,.L37-.L9,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L10:
	.word	-1,.L11,0,.L32-.L11
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L8:
	.word	-1,.L9,0,.L37-.L9
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('config_SMU_reset')
	.sect	'.debug_loc'
.L6:
	.word	-1,.L7,0,.L38-.L7
	.half	2
	.byte	138,0
	.word	0,0
.L48:
	.word	0,0
.L44:
	.word	-1,.L7,.L40-.L7,.L60-.L7
	.half	5
	.byte	144,32,157,32,0
	.word	.L11-.L7,.L32-.L7
	.half	5
	.byte	144,32,157,32,0
	.word	.L2-.L7,.L61-.L7
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L53:
	.word	-1,.L7,.L62-.L7,.L37-.L7
	.half	5
	.byte	144,32,157,32,0
	.word	.L11-.L7,.L32-.L7
	.half	5
	.byte	144,32,157,32,0
	.word	.L52-.L7,.L63-.L7
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L57:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('trigger_SMU_reset')
	.sect	'.debug_loc'
.L12:
	.word	-1,.L13,0,.L59-.L13
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L102:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('config_SMU_reset')
	.sect	'.debug_frame'
	.word	12
	.word	.L102,.L7,.L38-.L7
	.sdecl	'.debug_frame',debug,cluster('trigger_SMU_reset')
	.sect	'.debug_frame'
	.word	12
	.word	.L102,.L13,.L59-.L13
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L103:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L103,.L9,.L37-.L9
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L103,.L11,.L32-.L11
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Tricore\Main\SMU_Reset_Alarm.c	    63  }

	; Module end
